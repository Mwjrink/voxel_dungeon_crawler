using System;
using System.Collections.Generic;
using System.Collections;
using System.Linq;
using UnityEngine;
using Unity.Collections;

public class WorldGenerator : MonoBehaviour
{
    public Material material;
    // 960 is max?
    public int chunkSize;
    //public PlayerController player; // streaming
    public int seed;
    public int octaves;
    public float persistence;
    public float threshold;
    public float samplingScaleFactor;
    public float heightThreshold;

    //private Vector3 origin; // for streaming
    private Perlin perlin;

    private readonly List<Vector3> vertices = new List<Vector3>();
    private readonly List<int> indices = new List<int>();
    private readonly List<Color> colors = new List<Color>();
    private readonly List<Vector3> normals = new List<Vector3>();

    private void Awake()
    {
        print("running");
        //var mFilt = gameObject.GetComponent<MeshFilter>();
        ////var mColl = gameObject.AddComponent<MeshCollider>();
        ////var rBody = gameObject.AddComponent<Rigidbody>();

        //mFilt.mesh = mesh;
        ////mColl.mesh = mesh;

        ////MeshTopology.Quads;
        ///
        var mFilt = gameObject.AddComponent<MeshFilter>();
        var mRend = gameObject.AddComponent<MeshRenderer>();

        gameObject.isStatic = true;
        gameObject.transform.localScale = new Vector3(5, 5, 5);

        perlin = new Perlin(seed);

        generateMesh();
        print(indices.Count);

        var mesh = new Mesh();
        {
            mesh.indexFormat = UnityEngine.Rendering.IndexFormat.UInt32;

            mesh.subMeshCount = 1;
            mesh.SetVertices(vertices);
            mesh.SetIndices(indices, MeshTopology.Triangles, 0);
            //mesh.SetColors(colors);
            //mesh.SetNormals(normals);

            //mesh.SetNormals();
            //mesh.SetColors();
        }

        mFilt.mesh = mesh;
        mRend.material = material;
    }

    //65500 (ushort) vertex max
    //32x32x32 should be fine
    //23x23x23 would be the max if every cube had 5 vertices showing

    //Mesh buffers are 16 bit by default. See Mesh-indexFormat:
    //Index buffer can either be 16 bit(supports up to 65535 vertices in a mesh), or 32 bit(supports up to 4 billion vertices). Default index format is 16 bit, since that takes less memory and bandwidth.
    //Without looking too closely at the rest of your code, I do note that you've not set a 32 bit buffer. Try:
    //mesh.indexFormat = UnityEngine.Rendering.IndexFormat.UInt32;

    //https://stackoverflow.com/questions/50433894/how-to-use-meshes-with-more-than-64k-vertices-in-unity-2018-1

    //OPENGL Perlin noise shader: http://www.sci.utah.edu/~leenak/IndStudy_reportfall/PNoiseCode.txt

    //928x928x928 chunk is max if 5 vertices per cube is showing

    //Use box marching

    private void generateMesh()
    {
        var cubes = new byte[chunkSize + 1, chunkSize + 1, chunkSize + 1]; // 2 greater on every axis to avoid overflow
        {
            for (int z = 1; z <= chunkSize; z++)
                for (int y = 1; y <= chunkSize; y++)
                    for (int x = 1; x <= chunkSize; x++)
                    {
                        // TOP FACE
                        // 0 1
                        // 2 3
                        // BOTTOM FACE
                        // 4 5
                        // 6 7

                        var density = perlin.OctavePerlin(x / samplingScaleFactor, y / samplingScaleFactor, z / samplingScaleFactor, octaves, persistence) - heightThreshold * y / samplingScaleFactor;



                        if (density > threshold)
                        {
                            cubes[x - 1, y - 1, z - 1] |= 128; // 0: 128
                            cubes[x/**/, y - 1, z - 1] |= 064; // 1: 064
                            cubes[x - 1, y/**/, z - 1] |= 032; // 2: 032
                            cubes[x/**/, y/**/, z - 1] |= 016; // 3: 016

                            cubes[x - 1, y - 1, z/**/] |= 008; // 4: 008
                            cubes[x/**/, y - 1, z/**/] |= 004; // 5: 004
                            cubes[x - 1, y/**/, z/**/] |= 002; // 6: 002
                            cubes[x/**/, y/**/, z/**/] |= 001; // 7: 001
                        }
                    }

            {
                //TPL
                for (int z = 1; z <= chunkSize; z++)
                    for (int y = 1; y <= chunkSize; y++)
                        for (int x = 1; x <= chunkSize; x++)
                        {
                            var cellData = regularCellData[regularCellClass[cubes[x, y, z]]];

                            var vertexCount = cellData.geometryCounts >> 4;
                            var triangleCount = cellData.geometryCounts & 15;

                            var localIndices = new List<int>(vertexCount);

                            // only care about low byte ie. & 0x0000000011111111
                            var vertData = regularVertexData[cubes[x, y, z]];
                            foreach (var vertLoc in vertData)
                            {
                                //var reuse = vertLoc >> 8;
                                var location = vertLoc & 255;
                                var c0 = location >> 4;
                                var c1 = location & 15;

                                // TOP FACE
                                // 0 1
                                // 2 3
                                // BOTTOM FACE
                                // 4 5
                                // 6 7

                                var vx = (c0 % 4 % 2 + c1 % 4 % 2) / 2.0f; // even
                                var vy = (c0 % 4 / 2 + c1 % 4 / 2) / 2.0f; // odd
                                var vz = (c0 / 4/**/ + c1 / 4/**/) / 2.0f; // * -1

                                // technically this whole mesh is inverted in the y
                                localIndices.Add(vertices.Count);
                                vertices.Add(new Vector3(vx + x, vy + y, vz + z));

                                colors.Add(Color.Lerp(Color.green, Color.white, (vy + (float)y) * 2.0f / (float)chunkSize));
                            }

                            indices.AddRange(Enumerable.Range(0, triangleCount * 3).Select(t => localIndices[cellData.vertexIndex[t]]));
                        }
            }
        }
    }

    // SOURCE: http://transvoxel.org/

    // The RegularCellData structure holds information about the triangulation
    // used for a single equivalence class in the modified Marching Cubes algorithm,
    // described in Section 3.2.

    struct RegularCellData
    {
        public byte geometryCounts;       // High nibble is vertex count, low nibble is triangle count.
        public byte[] vertexIndex;        // Groups of 3 indexes giving the triangulation.

        long GetVertexCount()
        {
            return (geometryCounts >> 4);
        }

        long GetTriangleCount()
        {
            return (geometryCounts & 0x0F);
        }
    };

    // The TransitionCellData structure holds information about the triangulation
    // used for a single equivalence class in the Transvoxel Algorithm transition cell,
    // described in Section 4.3.

    struct TransitionCellData
    {
        public long geometryCounts;     // High nibble is vertex count, low nibble is triangle count.
        public byte[] vertexIndex;  // Groups of 3 indexes giving the triangulation.

        long GetVertexCount()
        {
            return (geometryCounts >> 4);
        }

        long GetTriangleCount()
        {
            return (geometryCounts & 0x0F);
        }
    };

    // The regularCellClass table maps an 8-bit regular Marching Cubes case index to
    // an equivalence class index. Even though there are 18 equivalence classes in our
    // modified Marching Cubes algorithm, a couple of them use the same exact triangulations,
    // just with different vertex locations. We combined those classes for this table so
    // that the class index ranges from 0 to 15.

    private static readonly byte[] regularCellClass = new byte[256]
    {
        0x00, 0x01, 0x01, 0x03, 0x01, 0x03, 0x02, 0x04, 0x01, 0x02, 0x03, 0x04, 0x03, 0x04, 0x04, 0x03,
        0x01, 0x03, 0x02, 0x04, 0x02, 0x04, 0x06, 0x0C, 0x02, 0x05, 0x05, 0x0B, 0x05, 0x0A, 0x07, 0x04,
        0x01, 0x02, 0x03, 0x04, 0x02, 0x05, 0x05, 0x0A, 0x02, 0x06, 0x04, 0x0C, 0x05, 0x07, 0x0B, 0x04,
        0x03, 0x04, 0x04, 0x03, 0x05, 0x0B, 0x07, 0x04, 0x05, 0x07, 0x0A, 0x04, 0x08, 0x0E, 0x0E, 0x03,
        0x01, 0x02, 0x02, 0x05, 0x03, 0x04, 0x05, 0x0B, 0x02, 0x06, 0x05, 0x07, 0x04, 0x0C, 0x0A, 0x04,
        0x03, 0x04, 0x05, 0x0A, 0x04, 0x03, 0x07, 0x04, 0x05, 0x07, 0x08, 0x0E, 0x0B, 0x04, 0x0E, 0x03,
        0x02, 0x06, 0x05, 0x07, 0x05, 0x07, 0x08, 0x0E, 0x06, 0x09, 0x07, 0x0F, 0x07, 0x0F, 0x0E, 0x0D,
        0x04, 0x0C, 0x0B, 0x04, 0x0A, 0x04, 0x0E, 0x03, 0x07, 0x0F, 0x0E, 0x0D, 0x0E, 0x0D, 0x02, 0x01,
        0x01, 0x02, 0x02, 0x05, 0x02, 0x05, 0x06, 0x07, 0x03, 0x05, 0x04, 0x0A, 0x04, 0x0B, 0x0C, 0x04,
        0x02, 0x05, 0x06, 0x07, 0x06, 0x07, 0x09, 0x0F, 0x05, 0x08, 0x07, 0x0E, 0x07, 0x0E, 0x0F, 0x0D,
        0x03, 0x05, 0x04, 0x0B, 0x05, 0x08, 0x07, 0x0E, 0x04, 0x07, 0x03, 0x04, 0x0A, 0x0E, 0x04, 0x03,
        0x04, 0x0A, 0x0C, 0x04, 0x07, 0x0E, 0x0F, 0x0D, 0x0B, 0x0E, 0x04, 0x03, 0x0E, 0x02, 0x0D, 0x01,
        0x03, 0x05, 0x05, 0x08, 0x04, 0x0A, 0x07, 0x0E, 0x04, 0x07, 0x0B, 0x0E, 0x03, 0x04, 0x04, 0x03,
        0x04, 0x0B, 0x07, 0x0E, 0x0C, 0x04, 0x0F, 0x0D, 0x0A, 0x0E, 0x0E, 0x02, 0x04, 0x03, 0x0D, 0x01,
        0x04, 0x07, 0x0A, 0x0E, 0x0B, 0x0E, 0x0E, 0x02, 0x0C, 0x0F, 0x04, 0x0D, 0x04, 0x0D, 0x03, 0x01,
        0x03, 0x04, 0x04, 0x03, 0x04, 0x03, 0x0D, 0x01, 0x04, 0x0D, 0x03, 0x01, 0x03, 0x01, 0x01, 0x00
    };

    // The regularCellData table holds the triangulation data for all 16 distinct classes to
    // which a case can be mapped by the regularCellClass table.

    private static readonly RegularCellData[] regularCellData = new RegularCellData[16]
    {
        new RegularCellData{ geometryCounts = 0x00, vertexIndex = new byte[] {}},
        new RegularCellData{ geometryCounts = 0x31, vertexIndex = new byte[] {0, 1, 2}},
        new RegularCellData{ geometryCounts = 0x62, vertexIndex = new byte[] {0, 1, 2, 3, 4, 5}},
        new RegularCellData{ geometryCounts = 0x42, vertexIndex = new byte[] {0, 1, 2, 0, 2, 3}},
        new RegularCellData{ geometryCounts = 0x53, vertexIndex = new byte[] {0, 1, 4, 1, 3, 4, 1, 2, 3}},
        new RegularCellData{ geometryCounts = 0x73, vertexIndex = new byte[] {0, 1, 2, 0, 2, 3, 4, 5, 6}},
        new RegularCellData{ geometryCounts = 0x93, vertexIndex = new byte[] {0, 1, 2, 3, 4, 5, 6, 7, 8}},
        new RegularCellData{ geometryCounts = 0x84, vertexIndex = new byte[] {0, 1, 4, 1, 3, 4, 1, 2, 3, 5, 6, 7}},
        new RegularCellData{ geometryCounts = 0x84, vertexIndex = new byte[] {0, 1, 2, 0, 2, 3, 4, 5, 6, 4, 6, 7}},
        new RegularCellData{ geometryCounts = 0xC4, vertexIndex = new byte[] {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}},
        new RegularCellData{ geometryCounts = 0x64, vertexIndex = new byte[] {0, 4, 5, 0, 1, 4, 1, 3, 4, 1, 2, 3}},
        new RegularCellData{ geometryCounts = 0x64, vertexIndex = new byte[] {0, 5, 4, 0, 4, 1, 1, 4, 3, 1, 3, 2}},
        new RegularCellData{ geometryCounts = 0x64, vertexIndex = new byte[] {0, 4, 5, 0, 3, 4, 0, 1, 3, 1, 2, 3}},
        new RegularCellData{ geometryCounts = 0x64, vertexIndex = new byte[] {0, 1, 2, 0, 2, 3, 0, 3, 4, 0, 4, 5}},
        new RegularCellData{ geometryCounts = 0x75, vertexIndex = new byte[] {0, 1, 2, 0, 2, 3, 0, 3, 4, 0, 4, 5, 0, 5, 6}},
        new RegularCellData{ geometryCounts = 0x95, vertexIndex = new byte[] {0, 4, 5, 0, 3, 4, 0, 1, 3, 1, 2, 3, 6, 7, 8}}
    };

    // The regularVertexData table gives the vertex locations for every one of the 256 possible
    // cases in the modified Marching Cubes algorithm. Each 16-bit value also provides information
    // about whether a vertex can be reused from a neighboring cell. See Section 3.3 for details.
    // The low byte contains the indexes for the two endpoints of the edge on which the vertex lies,
    // as numbered in Figure 3.7. The high byte contains the vertex reuse data shown in Figure 3.8.

    private static readonly List<ushort>[] regularVertexData = new List<ushort>[256]
    {
        new List<ushort>{},
        new List<ushort>{0x6201, 0x5102, 0x3304},
        new List<ushort>{0x6201, 0x2315, 0x4113},
        new List<ushort>{0x5102, 0x3304, 0x2315, 0x4113},
        new List<ushort>{0x5102, 0x4223, 0x1326},
        new List<ushort>{0x3304, 0x6201, 0x4223, 0x1326},
        new List<ushort>{0x6201, 0x2315, 0x4113, 0x5102, 0x4223, 0x1326},
        new List<ushort>{0x4223, 0x1326, 0x3304, 0x2315, 0x4113},
        new List<ushort>{0x4113, 0x8337, 0x4223},
        new List<ushort>{0x6201, 0x5102, 0x3304, 0x4223, 0x4113, 0x8337},
        new List<ushort>{0x6201, 0x2315, 0x8337, 0x4223},
        new List<ushort>{0x5102, 0x3304, 0x2315, 0x8337, 0x4223},
        new List<ushort>{0x5102, 0x4113, 0x8337, 0x1326},
        new List<ushort>{0x4113, 0x8337, 0x1326, 0x3304, 0x6201},
        new List<ushort>{0x6201, 0x2315, 0x8337, 0x1326, 0x5102},
        new List<ushort>{0x3304, 0x2315, 0x8337, 0x1326},
        new List<ushort>{0x3304, 0x1146, 0x2245},
        new List<ushort>{0x6201, 0x5102, 0x1146, 0x2245},
        new List<ushort>{0x6201, 0x2315, 0x4113, 0x3304, 0x1146, 0x2245},
        new List<ushort>{0x2315, 0x4113, 0x5102, 0x1146, 0x2245},
        new List<ushort>{0x5102, 0x4223, 0x1326, 0x3304, 0x1146, 0x2245},
        new List<ushort>{0x1146, 0x2245, 0x6201, 0x4223, 0x1326},
        new List<ushort>{0x3304, 0x1146, 0x2245, 0x6201, 0x2315, 0x4113, 0x5102, 0x4223, 0x1326},
        new List<ushort>{0x4223, 0x1326, 0x1146, 0x2245, 0x2315, 0x4113},
        new List<ushort>{0x4223, 0x4113, 0x8337, 0x3304, 0x1146, 0x2245},
        new List<ushort>{0x6201, 0x5102, 0x1146, 0x2245, 0x4223, 0x4113, 0x8337},
        new List<ushort>{0x4223, 0x6201, 0x2315, 0x8337, 0x3304, 0x1146, 0x2245},
        new List<ushort>{0x4223, 0x8337, 0x2315, 0x2245, 0x1146, 0x5102},
        new List<ushort>{0x5102, 0x4113, 0x8337, 0x1326, 0x3304, 0x1146, 0x2245},
        new List<ushort>{0x4113, 0x8337, 0x1326, 0x1146, 0x2245, 0x6201},
        new List<ushort>{0x6201, 0x2315, 0x8337, 0x1326, 0x5102, 0x3304, 0x1146, 0x2245},
        new List<ushort>{0x2245, 0x2315, 0x8337, 0x1326, 0x1146},
        new List<ushort>{0x2315, 0x2245, 0x8157},
        new List<ushort>{0x6201, 0x5102, 0x3304, 0x2315, 0x2245, 0x8157},
        new List<ushort>{0x4113, 0x6201, 0x2245, 0x8157},
        new List<ushort>{0x2245, 0x8157, 0x4113, 0x5102, 0x3304},
        new List<ushort>{0x5102, 0x4223, 0x1326, 0x2315, 0x2245, 0x8157},
        new List<ushort>{0x6201, 0x4223, 0x1326, 0x3304, 0x2315, 0x2245, 0x8157},
        new List<ushort>{0x6201, 0x2245, 0x8157, 0x4113, 0x5102, 0x4223, 0x1326},
        new List<ushort>{0x4223, 0x1326, 0x3304, 0x2245, 0x8157, 0x4113},
        new List<ushort>{0x4223, 0x4113, 0x8337, 0x2315, 0x2245, 0x8157},
        new List<ushort>{0x6201, 0x5102, 0x3304, 0x4223, 0x4113, 0x8337, 0x2315, 0x2245, 0x8157},
        new List<ushort>{0x8337, 0x4223, 0x6201, 0x2245, 0x8157},
        new List<ushort>{0x5102, 0x3304, 0x2245, 0x8157, 0x8337, 0x4223},
        new List<ushort>{0x5102, 0x4113, 0x8337, 0x1326, 0x2315, 0x2245, 0x8157},
        new List<ushort>{0x4113, 0x8337, 0x1326, 0x3304, 0x6201, 0x2315, 0x2245, 0x8157},
        new List<ushort>{0x5102, 0x1326, 0x8337, 0x8157, 0x2245, 0x6201},
        new List<ushort>{0x8157, 0x8337, 0x1326, 0x3304, 0x2245},
        new List<ushort>{0x2315, 0x3304, 0x1146, 0x8157},
        new List<ushort>{0x6201, 0x5102, 0x1146, 0x8157, 0x2315},
        new List<ushort>{0x3304, 0x1146, 0x8157, 0x4113, 0x6201},
        new List<ushort>{0x4113, 0x5102, 0x1146, 0x8157},
        new List<ushort>{0x2315, 0x3304, 0x1146, 0x8157, 0x5102, 0x4223, 0x1326},
        new List<ushort>{0x1326, 0x4223, 0x6201, 0x2315, 0x8157, 0x1146},
        new List<ushort>{0x3304, 0x1146, 0x8157, 0x4113, 0x6201, 0x5102, 0x4223, 0x1326},
        new List<ushort>{0x1326, 0x1146, 0x8157, 0x4113, 0x4223},
        new List<ushort>{0x2315, 0x3304, 0x1146, 0x8157, 0x4223, 0x4113, 0x8337},
        new List<ushort>{0x6201, 0x5102, 0x1146, 0x8157, 0x2315, 0x4223, 0x4113, 0x8337},
        new List<ushort>{0x3304, 0x1146, 0x8157, 0x8337, 0x4223, 0x6201},
        new List<ushort>{0x4223, 0x5102, 0x1146, 0x8157, 0x8337},
        new List<ushort>{0x2315, 0x3304, 0x1146, 0x8157, 0x5102, 0x4113, 0x8337, 0x1326},
        new List<ushort>{0x6201, 0x4113, 0x8337, 0x1326, 0x1146, 0x8157, 0x2315},
        new List<ushort>{0x6201, 0x3304, 0x1146, 0x8157, 0x8337, 0x1326, 0x5102},
        new List<ushort>{0x1326, 0x1146, 0x8157, 0x8337},
        new List<ushort>{0x1326, 0x8267, 0x1146},
        new List<ushort>{0x6201, 0x5102, 0x3304, 0x1326, 0x8267, 0x1146},
        new List<ushort>{0x6201, 0x2315, 0x4113, 0x1326, 0x8267, 0x1146},
        new List<ushort>{0x5102, 0x3304, 0x2315, 0x4113, 0x1326, 0x8267, 0x1146},
        new List<ushort>{0x5102, 0x4223, 0x8267, 0x1146},
        new List<ushort>{0x3304, 0x6201, 0x4223, 0x8267, 0x1146},
        new List<ushort>{0x5102, 0x4223, 0x8267, 0x1146, 0x6201, 0x2315, 0x4113},
        new List<ushort>{0x1146, 0x8267, 0x4223, 0x4113, 0x2315, 0x3304},
        new List<ushort>{0x4113, 0x8337, 0x4223, 0x1326, 0x8267, 0x1146},
        new List<ushort>{0x6201, 0x5102, 0x3304, 0x4223, 0x4113, 0x8337, 0x1326, 0x8267, 0x1146},
        new List<ushort>{0x6201, 0x2315, 0x8337, 0x4223, 0x1326, 0x8267, 0x1146},
        new List<ushort>{0x5102, 0x3304, 0x2315, 0x8337, 0x4223, 0x1326, 0x8267, 0x1146},
        new List<ushort>{0x8267, 0x1146, 0x5102, 0x4113, 0x8337},
        new List<ushort>{0x6201, 0x4113, 0x8337, 0x8267, 0x1146, 0x3304},
        new List<ushort>{0x6201, 0x2315, 0x8337, 0x8267, 0x1146, 0x5102},
        new List<ushort>{0x1146, 0x3304, 0x2315, 0x8337, 0x8267},
        new List<ushort>{0x3304, 0x1326, 0x8267, 0x2245},
        new List<ushort>{0x1326, 0x8267, 0x2245, 0x6201, 0x5102},
        new List<ushort>{0x3304, 0x1326, 0x8267, 0x2245, 0x6201, 0x2315, 0x4113},
        new List<ushort>{0x1326, 0x8267, 0x2245, 0x2315, 0x4113, 0x5102},
        new List<ushort>{0x5102, 0x4223, 0x8267, 0x2245, 0x3304},
        new List<ushort>{0x6201, 0x4223, 0x8267, 0x2245},
        new List<ushort>{0x5102, 0x4223, 0x8267, 0x2245, 0x3304, 0x6201, 0x2315, 0x4113},
        new List<ushort>{0x4113, 0x4223, 0x8267, 0x2245, 0x2315},
        new List<ushort>{0x3304, 0x1326, 0x8267, 0x2245, 0x4223, 0x4113, 0x8337},
        new List<ushort>{0x1326, 0x8267, 0x2245, 0x6201, 0x5102, 0x4223, 0x4113, 0x8337},
        new List<ushort>{0x3304, 0x1326, 0x8267, 0x2245, 0x4223, 0x6201, 0x2315, 0x8337},
        new List<ushort>{0x5102, 0x1326, 0x8267, 0x2245, 0x2315, 0x8337, 0x4223},
        new List<ushort>{0x3304, 0x2245, 0x8267, 0x8337, 0x4113, 0x5102},
        new List<ushort>{0x8337, 0x8267, 0x2245, 0x6201, 0x4113},
        new List<ushort>{0x5102, 0x6201, 0x2315, 0x8337, 0x8267, 0x2245, 0x3304},
        new List<ushort>{0x2315, 0x8337, 0x8267, 0x2245},
        new List<ushort>{0x2315, 0x2245, 0x8157, 0x1326, 0x8267, 0x1146},
        new List<ushort>{0x6201, 0x5102, 0x3304, 0x2315, 0x2245, 0x8157, 0x1326, 0x8267, 0x1146},
        new List<ushort>{0x6201, 0x2245, 0x8157, 0x4113, 0x1326, 0x8267, 0x1146},
        new List<ushort>{0x2245, 0x8157, 0x4113, 0x5102, 0x3304, 0x1326, 0x8267, 0x1146},
        new List<ushort>{0x4223, 0x8267, 0x1146, 0x5102, 0x2315, 0x2245, 0x8157},
        new List<ushort>{0x3304, 0x6201, 0x4223, 0x8267, 0x1146, 0x2315, 0x2245, 0x8157},
        new List<ushort>{0x4223, 0x8267, 0x1146, 0x5102, 0x6201, 0x2245, 0x8157, 0x4113},
        new List<ushort>{0x3304, 0x2245, 0x8157, 0x4113, 0x4223, 0x8267, 0x1146},
        new List<ushort>{0x4223, 0x4113, 0x8337, 0x2315, 0x2245, 0x8157, 0x1326, 0x8267, 0x1146},
        new List<ushort>{0x6201, 0x5102, 0x3304, 0x4223, 0x4113, 0x8337, 0x2315, 0x2245, 0x8157, 0x1326, 0x8267, 0x1146},
        new List<ushort>{0x8337, 0x4223, 0x6201, 0x2245, 0x8157, 0x1326, 0x8267, 0x1146},
        new List<ushort>{0x4223, 0x5102, 0x3304, 0x2245, 0x8157, 0x8337, 0x1326, 0x8267, 0x1146},
        new List<ushort>{0x8267, 0x1146, 0x5102, 0x4113, 0x8337, 0x2315, 0x2245, 0x8157},
        new List<ushort>{0x6201, 0x4113, 0x8337, 0x8267, 0x1146, 0x3304, 0x2315, 0x2245, 0x8157},
        new List<ushort>{0x8337, 0x8267, 0x1146, 0x5102, 0x6201, 0x2245, 0x8157},
        new List<ushort>{0x3304, 0x2245, 0x8157, 0x8337, 0x8267, 0x1146},
        new List<ushort>{0x8157, 0x2315, 0x3304, 0x1326, 0x8267},
        new List<ushort>{0x8267, 0x8157, 0x2315, 0x6201, 0x5102, 0x1326},
        new List<ushort>{0x8267, 0x1326, 0x3304, 0x6201, 0x4113, 0x8157},
        new List<ushort>{0x8267, 0x8157, 0x4113, 0x5102, 0x1326},
        new List<ushort>{0x5102, 0x4223, 0x8267, 0x8157, 0x2315, 0x3304},
        new List<ushort>{0x2315, 0x6201, 0x4223, 0x8267, 0x8157},
        new List<ushort>{0x3304, 0x5102, 0x4223, 0x8267, 0x8157, 0x4113, 0x6201},
        new List<ushort>{0x4113, 0x4223, 0x8267, 0x8157},
        new List<ushort>{0x8157, 0x2315, 0x3304, 0x1326, 0x8267, 0x4223, 0x4113, 0x8337},
        new List<ushort>{0x8157, 0x2315, 0x6201, 0x5102, 0x1326, 0x8267, 0x4223, 0x4113, 0x8337},
        new List<ushort>{0x8157, 0x8337, 0x4223, 0x6201, 0x3304, 0x1326, 0x8267},
        new List<ushort>{0x5102, 0x1326, 0x8267, 0x8157, 0x8337, 0x4223},
        new List<ushort>{0x8267, 0x8157, 0x2315, 0x3304, 0x5102, 0x4113, 0x8337},
        new List<ushort>{0x6201, 0x4113, 0x8337, 0x8267, 0x8157, 0x2315},
        new List<ushort>{0x6201, 0x3304, 0x5102, 0x8337, 0x8267, 0x8157},
        new List<ushort>{0x8337, 0x8267, 0x8157},
        new List<ushort>{0x8337, 0x8157, 0x8267},
        new List<ushort>{0x6201, 0x5102, 0x3304, 0x8337, 0x8157, 0x8267},
        new List<ushort>{0x6201, 0x2315, 0x4113, 0x8337, 0x8157, 0x8267},
        new List<ushort>{0x5102, 0x3304, 0x2315, 0x4113, 0x8337, 0x8157, 0x8267},
        new List<ushort>{0x5102, 0x4223, 0x1326, 0x8337, 0x8157, 0x8267},
        new List<ushort>{0x6201, 0x4223, 0x1326, 0x3304, 0x8337, 0x8157, 0x8267},
        new List<ushort>{0x6201, 0x2315, 0x4113, 0x5102, 0x4223, 0x1326, 0x8337, 0x8157, 0x8267},
        new List<ushort>{0x4223, 0x1326, 0x3304, 0x2315, 0x4113, 0x8337, 0x8157, 0x8267},
        new List<ushort>{0x4113, 0x8157, 0x8267, 0x4223},
        new List<ushort>{0x4223, 0x4113, 0x8157, 0x8267, 0x6201, 0x5102, 0x3304},
        new List<ushort>{0x8157, 0x8267, 0x4223, 0x6201, 0x2315},
        new List<ushort>{0x3304, 0x2315, 0x8157, 0x8267, 0x4223, 0x5102},
        new List<ushort>{0x1326, 0x5102, 0x4113, 0x8157, 0x8267},
        new List<ushort>{0x8157, 0x4113, 0x6201, 0x3304, 0x1326, 0x8267},
        new List<ushort>{0x1326, 0x5102, 0x6201, 0x2315, 0x8157, 0x8267},
        new List<ushort>{0x8267, 0x1326, 0x3304, 0x2315, 0x8157},
        new List<ushort>{0x3304, 0x1146, 0x2245, 0x8337, 0x8157, 0x8267},
        new List<ushort>{0x6201, 0x5102, 0x1146, 0x2245, 0x8337, 0x8157, 0x8267},
        new List<ushort>{0x6201, 0x2315, 0x4113, 0x3304, 0x1146, 0x2245, 0x8337, 0x8157, 0x8267},
        new List<ushort>{0x2315, 0x4113, 0x5102, 0x1146, 0x2245, 0x8337, 0x8157, 0x8267},
        new List<ushort>{0x5102, 0x4223, 0x1326, 0x3304, 0x1146, 0x2245, 0x8337, 0x8157, 0x8267},
        new List<ushort>{0x1146, 0x2245, 0x6201, 0x4223, 0x1326, 0x8337, 0x8157, 0x8267},
        new List<ushort>{0x6201, 0x2315, 0x4113, 0x5102, 0x4223, 0x1326, 0x3304, 0x1146, 0x2245, 0x8337, 0x8157, 0x8267},
        new List<ushort>{0x4113, 0x4223, 0x1326, 0x1146, 0x2245, 0x2315, 0x8337, 0x8157, 0x8267},
        new List<ushort>{0x4223, 0x4113, 0x8157, 0x8267, 0x3304, 0x1146, 0x2245},
        new List<ushort>{0x6201, 0x5102, 0x1146, 0x2245, 0x4223, 0x4113, 0x8157, 0x8267},
        new List<ushort>{0x8157, 0x8267, 0x4223, 0x6201, 0x2315, 0x3304, 0x1146, 0x2245},
        new List<ushort>{0x2315, 0x8157, 0x8267, 0x4223, 0x5102, 0x1146, 0x2245},
        new List<ushort>{0x1326, 0x5102, 0x4113, 0x8157, 0x8267, 0x3304, 0x1146, 0x2245},
        new List<ushort>{0x1326, 0x1146, 0x2245, 0x6201, 0x4113, 0x8157, 0x8267},
        new List<ushort>{0x5102, 0x6201, 0x2315, 0x8157, 0x8267, 0x1326, 0x3304, 0x1146, 0x2245},
        new List<ushort>{0x1326, 0x1146, 0x2245, 0x2315, 0x8157, 0x8267},
        new List<ushort>{0x2315, 0x2245, 0x8267, 0x8337},
        new List<ushort>{0x2315, 0x2245, 0x8267, 0x8337, 0x6201, 0x5102, 0x3304},
        new List<ushort>{0x4113, 0x6201, 0x2245, 0x8267, 0x8337},
        new List<ushort>{0x5102, 0x4113, 0x8337, 0x8267, 0x2245, 0x3304},
        new List<ushort>{0x2315, 0x2245, 0x8267, 0x8337, 0x5102, 0x4223, 0x1326},
        new List<ushort>{0x6201, 0x4223, 0x1326, 0x3304, 0x8337, 0x2315, 0x2245, 0x8267},
        new List<ushort>{0x4113, 0x6201, 0x2245, 0x8267, 0x8337, 0x5102, 0x4223, 0x1326},
        new List<ushort>{0x4113, 0x4223, 0x1326, 0x3304, 0x2245, 0x8267, 0x8337},
        new List<ushort>{0x2315, 0x2245, 0x8267, 0x4223, 0x4113},
        new List<ushort>{0x2315, 0x2245, 0x8267, 0x4223, 0x4113, 0x6201, 0x5102, 0x3304},
        new List<ushort>{0x6201, 0x2245, 0x8267, 0x4223},
        new List<ushort>{0x3304, 0x2245, 0x8267, 0x4223, 0x5102},
        new List<ushort>{0x5102, 0x4113, 0x2315, 0x2245, 0x8267, 0x1326},
        new List<ushort>{0x4113, 0x2315, 0x2245, 0x8267, 0x1326, 0x3304, 0x6201},
        new List<ushort>{0x5102, 0x6201, 0x2245, 0x8267, 0x1326},
        new List<ushort>{0x3304, 0x2245, 0x8267, 0x1326},
        new List<ushort>{0x8267, 0x8337, 0x2315, 0x3304, 0x1146},
        new List<ushort>{0x5102, 0x1146, 0x8267, 0x8337, 0x2315, 0x6201},
        new List<ushort>{0x3304, 0x1146, 0x8267, 0x8337, 0x4113, 0x6201},
        new List<ushort>{0x8337, 0x4113, 0x5102, 0x1146, 0x8267},
        new List<ushort>{0x8267, 0x8337, 0x2315, 0x3304, 0x1146, 0x5102, 0x4223, 0x1326},
        new List<ushort>{0x1146, 0x8267, 0x8337, 0x2315, 0x6201, 0x4223, 0x1326},
        new List<ushort>{0x8267, 0x8337, 0x4113, 0x6201, 0x3304, 0x1146, 0x5102, 0x4223, 0x1326},
        new List<ushort>{0x4113, 0x4223, 0x1326, 0x1146, 0x8267, 0x8337},
        new List<ushort>{0x3304, 0x2315, 0x4113, 0x4223, 0x8267, 0x1146},
        new List<ushort>{0x2315, 0x6201, 0x5102, 0x1146, 0x8267, 0x4223, 0x4113},
        new List<ushort>{0x1146, 0x8267, 0x4223, 0x6201, 0x3304},
        new List<ushort>{0x5102, 0x1146, 0x8267, 0x4223},
        new List<ushort>{0x8267, 0x1326, 0x5102, 0x4113, 0x2315, 0x3304, 0x1146},
        new List<ushort>{0x6201, 0x4113, 0x2315, 0x1326, 0x1146, 0x8267},
        new List<ushort>{0x6201, 0x3304, 0x1146, 0x8267, 0x1326, 0x5102},
        new List<ushort>{0x1326, 0x1146, 0x8267},
        new List<ushort>{0x1326, 0x8337, 0x8157, 0x1146},
        new List<ushort>{0x8337, 0x8157, 0x1146, 0x1326, 0x6201, 0x5102, 0x3304},
        new List<ushort>{0x8337, 0x8157, 0x1146, 0x1326, 0x6201, 0x2315, 0x4113},
        new List<ushort>{0x4113, 0x5102, 0x3304, 0x2315, 0x1326, 0x8337, 0x8157, 0x1146},
        new List<ushort>{0x8337, 0x8157, 0x1146, 0x5102, 0x4223},
        new List<ushort>{0x6201, 0x4223, 0x8337, 0x8157, 0x1146, 0x3304},
        new List<ushort>{0x8337, 0x8157, 0x1146, 0x5102, 0x4223, 0x6201, 0x2315, 0x4113},
        new List<ushort>{0x4223, 0x8337, 0x8157, 0x1146, 0x3304, 0x2315, 0x4113},
        new List<ushort>{0x4223, 0x4113, 0x8157, 0x1146, 0x1326},
        new List<ushort>{0x4223, 0x4113, 0x8157, 0x1146, 0x1326, 0x6201, 0x5102, 0x3304},
        new List<ushort>{0x1146, 0x8157, 0x2315, 0x6201, 0x4223, 0x1326},
        new List<ushort>{0x4223, 0x5102, 0x3304, 0x2315, 0x8157, 0x1146, 0x1326},
        new List<ushort>{0x4113, 0x8157, 0x1146, 0x5102},
        new List<ushort>{0x6201, 0x4113, 0x8157, 0x1146, 0x3304},
        new List<ushort>{0x2315, 0x8157, 0x1146, 0x5102, 0x6201},
        new List<ushort>{0x2315, 0x8157, 0x1146, 0x3304},
        new List<ushort>{0x2245, 0x3304, 0x1326, 0x8337, 0x8157},
        new List<ushort>{0x6201, 0x2245, 0x8157, 0x8337, 0x1326, 0x5102},
        new List<ushort>{0x2245, 0x3304, 0x1326, 0x8337, 0x8157, 0x6201, 0x2315, 0x4113},
        new List<ushort>{0x2245, 0x2315, 0x4113, 0x5102, 0x1326, 0x8337, 0x8157},
        new List<ushort>{0x4223, 0x8337, 0x8157, 0x2245, 0x3304, 0x5102},
        new List<ushort>{0x8157, 0x2245, 0x6201, 0x4223, 0x8337},
        new List<ushort>{0x2245, 0x3304, 0x5102, 0x4223, 0x8337, 0x8157, 0x4113, 0x6201, 0x2315},
        new List<ushort>{0x4223, 0x8337, 0x8157, 0x2245, 0x2315, 0x4113},
        new List<ushort>{0x4113, 0x8157, 0x2245, 0x3304, 0x1326, 0x4223},
        new List<ushort>{0x1326, 0x4223, 0x4113, 0x8157, 0x2245, 0x6201, 0x5102},
        new List<ushort>{0x8157, 0x2245, 0x3304, 0x1326, 0x4223, 0x6201, 0x2315},
        new List<ushort>{0x5102, 0x1326, 0x4223, 0x2315, 0x8157, 0x2245},
        new List<ushort>{0x3304, 0x5102, 0x4113, 0x8157, 0x2245},
        new List<ushort>{0x4113, 0x8157, 0x2245, 0x6201},
        new List<ushort>{0x5102, 0x6201, 0x2315, 0x8157, 0x2245, 0x3304},
        new List<ushort>{0x2315, 0x8157, 0x2245},
        new List<ushort>{0x1146, 0x1326, 0x8337, 0x2315, 0x2245},
        new List<ushort>{0x1146, 0x1326, 0x8337, 0x2315, 0x2245, 0x6201, 0x5102, 0x3304},
        new List<ushort>{0x6201, 0x2245, 0x1146, 0x1326, 0x8337, 0x4113},
        new List<ushort>{0x2245, 0x1146, 0x1326, 0x8337, 0x4113, 0x5102, 0x3304},
        new List<ushort>{0x5102, 0x1146, 0x2245, 0x2315, 0x8337, 0x4223},
        new List<ushort>{0x1146, 0x3304, 0x6201, 0x4223, 0x8337, 0x2315, 0x2245},
        new List<ushort>{0x8337, 0x4113, 0x6201, 0x2245, 0x1146, 0x5102, 0x4223},
        new List<ushort>{0x4223, 0x8337, 0x4113, 0x3304, 0x2245, 0x1146},
        new List<ushort>{0x4113, 0x2315, 0x2245, 0x1146, 0x1326, 0x4223},
        new List<ushort>{0x1146, 0x1326, 0x4223, 0x4113, 0x2315, 0x2245, 0x6201, 0x5102, 0x3304},
        new List<ushort>{0x1326, 0x4223, 0x6201, 0x2245, 0x1146},
        new List<ushort>{0x4223, 0x5102, 0x3304, 0x2245, 0x1146, 0x1326},
        new List<ushort>{0x2245, 0x1146, 0x5102, 0x4113, 0x2315},
        new List<ushort>{0x4113, 0x2315, 0x2245, 0x1146, 0x3304, 0x6201},
        new List<ushort>{0x6201, 0x2245, 0x1146, 0x5102},
        new List<ushort>{0x3304, 0x2245, 0x1146},
        new List<ushort>{0x3304, 0x1326, 0x8337, 0x2315},
        new List<ushort>{0x5102, 0x1326, 0x8337, 0x2315, 0x6201},
        new List<ushort>{0x6201, 0x3304, 0x1326, 0x8337, 0x4113},
        new List<ushort>{0x5102, 0x1326, 0x8337, 0x4113},
        new List<ushort>{0x4223, 0x8337, 0x2315, 0x3304, 0x5102},
        new List<ushort>{0x6201, 0x4223, 0x8337, 0x2315},
        new List<ushort>{0x3304, 0x5102, 0x4223, 0x8337, 0x4113, 0x6201},
        new List<ushort>{0x4113, 0x4223, 0x8337},
        new List<ushort>{0x4113, 0x2315, 0x3304, 0x1326, 0x4223},
        new List<ushort>{0x1326, 0x4223, 0x4113, 0x2315, 0x6201, 0x5102},
        new List<ushort>{0x3304, 0x1326, 0x4223, 0x6201},
        new List<ushort>{0x5102, 0x1326, 0x4223},
        new List<ushort>{0x5102, 0x4113, 0x2315, 0x3304},
        new List<ushort>{0x6201, 0x4113, 0x2315},
        new List<ushort>{0x6201, 0x3304, 0x5102},
        new List<ushort>{}
    };

    // The transitionCellClass table maps a 9-bit transition cell case index to an equivalence
    // class index. Even though there are 73 equivalence classes in the Transvoxel Algorithm,
    // several of them use the same exact triangulations, just with different vertex locations.
    // We combined those classes for this table so that the class index ranges from 0 to 55.
    // The high bit is set in the cases for which the inverse state of the voxel data maps to
    // the equivalence class, meaning that the winding order of each triangle should be reversed.

    private static readonly byte[] transitionCellClass = new byte[512]
    {
        0x00, 0x01, 0x02, 0x84, 0x01, 0x05, 0x04, 0x04, 0x02, 0x87, 0x09, 0x8C, 0x84, 0x0B, 0x05, 0x05,
        0x01, 0x08, 0x07, 0x8D, 0x05, 0x0F, 0x8B, 0x0B, 0x04, 0x0D, 0x0C, 0x1C, 0x04, 0x8B, 0x85, 0x85,
        0x02, 0x07, 0x09, 0x8C, 0x87, 0x10, 0x0C, 0x0C, 0x09, 0x12, 0x15, 0x9A, 0x8C, 0x19, 0x90, 0x10,
        0x84, 0x8D, 0x8C, 0x9C, 0x0B, 0x9D, 0x0F, 0x0F, 0x05, 0x1B, 0x10, 0xAC, 0x05, 0x0F, 0x8B, 0x0B,
        0x01, 0x05, 0x87, 0x0B, 0x08, 0x0F, 0x0D, 0x8B, 0x07, 0x10, 0x12, 0x19, 0x8D, 0x9D, 0x1B, 0x0F,
        0x05, 0x0F, 0x10, 0x9D, 0x0F, 0x1E, 0x1D, 0xA1, 0x8B, 0x1D, 0x99, 0x32, 0x0B, 0xA1, 0x8F, 0x94,
        0x04, 0x8B, 0x0C, 0x0F, 0x0D, 0x1D, 0x1C, 0x8F, 0x0C, 0x99, 0x1A, 0x31, 0x1C, 0x32, 0x2C, 0xA7,
        0x04, 0x0B, 0x0C, 0x0F, 0x8B, 0xA1, 0x8F, 0x96, 0x85, 0x8F, 0x90, 0x27, 0x85, 0x94, 0x8B, 0x8A,
        0x02, 0x04, 0x09, 0x05, 0x07, 0x8B, 0x0C, 0x85, 0x09, 0x0C, 0x15, 0x90, 0x8C, 0x0F, 0x10, 0x8B,
        0x87, 0x0D, 0x12, 0x1B, 0x10, 0x1D, 0x99, 0x8F, 0x0C, 0x1C, 0x1A, 0x2C, 0x0C, 0x8F, 0x90, 0x8B,
        0x09, 0x0C, 0x15, 0x10, 0x12, 0x99, 0x1A, 0x90, 0x15, 0x1A, 0x23, 0x30, 0x9A, 0x31, 0x30, 0x19,
        0x8C, 0x1C, 0x9A, 0xAC, 0x19, 0x32, 0x31, 0x27, 0x90, 0x2C, 0x30, 0x29, 0x10, 0xA7, 0x19, 0x24,
        0x84, 0x04, 0x8C, 0x05, 0x8D, 0x0B, 0x1C, 0x85, 0x8C, 0x0C, 0x9A, 0x10, 0x9C, 0x0F, 0xAC, 0x0B,
        0x0B, 0x8B, 0x19, 0x0F, 0x9D, 0xA1, 0x32, 0x94, 0x0F, 0x8F, 0x31, 0xA7, 0x0F, 0x96, 0x27, 0x8A,
        0x05, 0x85, 0x90, 0x8B, 0x1B, 0x8F, 0x2C, 0x8B, 0x10, 0x90, 0x30, 0x19, 0xAC, 0x27, 0x29, 0x24,
        0x05, 0x85, 0x10, 0x0B, 0x0F, 0x94, 0xA7, 0x8A, 0x8B, 0x8B, 0x19, 0x24, 0x0B, 0x8A, 0x24, 0x83,
        0x03, 0x06, 0x0A, 0x8B, 0x06, 0x0E, 0x0B, 0x0B, 0x0A, 0x91, 0x14, 0x8F, 0x8B, 0x17, 0x05, 0x85,
        0x06, 0x13, 0x11, 0x98, 0x0E, 0x1F, 0x97, 0x2B, 0x0B, 0x18, 0x0F, 0x36, 0x0B, 0xAB, 0x05, 0x85,
        0x0A, 0x11, 0x16, 0x8F, 0x91, 0x20, 0x0F, 0x8F, 0x14, 0x22, 0x21, 0x1D, 0x8F, 0x2D, 0x0B, 0x8B,
        0x8B, 0x98, 0x8F, 0xB7, 0x17, 0xAE, 0x8C, 0x0C, 0x05, 0x2F, 0x8B, 0xB5, 0x85, 0xA6, 0x84, 0x04,
        0x06, 0x0E, 0x91, 0x17, 0x13, 0x1F, 0x18, 0xAB, 0x11, 0x20, 0x22, 0x2D, 0x98, 0xAE, 0x2F, 0xA6,
        0x0E, 0x1F, 0x20, 0xAE, 0x1F, 0x33, 0x2E, 0x2A, 0x97, 0x2E, 0xAD, 0x28, 0x2B, 0x2A, 0x26, 0x25,
        0x0B, 0x97, 0x0F, 0x8C, 0x18, 0x2E, 0x37, 0x8C, 0x0F, 0xAD, 0x9D, 0x90, 0x36, 0x28, 0x35, 0x07,
        0x0B, 0x2B, 0x8F, 0x0C, 0xAB, 0x2A, 0x8C, 0x89, 0x05, 0x26, 0x0B, 0x87, 0x85, 0x25, 0x84, 0x82,
        0x0A, 0x0B, 0x14, 0x05, 0x11, 0x97, 0x0F, 0x05, 0x16, 0x0F, 0x21, 0x0B, 0x8F, 0x8C, 0x8B, 0x84,
        0x91, 0x18, 0x22, 0x2F, 0x20, 0x2E, 0xAD, 0x26, 0x0F, 0x37, 0x9D, 0x35, 0x8F, 0x8C, 0x0B, 0x84,
        0x14, 0x0F, 0x21, 0x8B, 0x22, 0xAD, 0x9D, 0x0B, 0x21, 0x9D, 0x9E, 0x8F, 0x1D, 0x90, 0x8F, 0x85,
        0x8F, 0x36, 0x1D, 0xB5, 0x2D, 0x28, 0x90, 0x87, 0x0B, 0x35, 0x8F, 0x34, 0x8B, 0x07, 0x85, 0x81,
        0x8B, 0x0B, 0x8F, 0x85, 0x98, 0x2B, 0x36, 0x85, 0x8F, 0x8F, 0x1D, 0x8B, 0xB7, 0x0C, 0xB5, 0x04,
        0x17, 0xAB, 0x2D, 0xA6, 0xAE, 0x2A, 0x28, 0x25, 0x8C, 0x8C, 0x90, 0x07, 0x0C, 0x89, 0x87, 0x82,
        0x05, 0x05, 0x0B, 0x84, 0x2F, 0x26, 0x35, 0x84, 0x8B, 0x0B, 0x8F, 0x85, 0xB5, 0x87, 0x34, 0x81,
        0x85, 0x85, 0x8B, 0x04, 0xA6, 0x25, 0x07, 0x82, 0x84, 0x84, 0x85, 0x81, 0x04, 0x82, 0x81, 0x80
    };

    // The transitionCellData table holds the triangulation data for all 56 distinct classes to
    // which a case can be mapped by the transitionCellClass table. The class index should be ANDed
    // with 0x7F before using it to look up triangulation data in this table.

    private static readonly TransitionCellData[] transitionCellData = new TransitionCellData[56]
    {
        new TransitionCellData{ geometryCounts = 0x00, vertexIndex = {}},
        new TransitionCellData{ geometryCounts = 0x42, vertexIndex = new byte[] {0, 1, 3, 1, 2, 3}},
        new TransitionCellData{ geometryCounts = 0x31, vertexIndex = new byte[] {0, 1, 2}},
        new TransitionCellData{ geometryCounts = 0x42, vertexIndex = new byte[] {0, 1, 2, 0, 2, 3}},
        new TransitionCellData{ geometryCounts = 0x53, vertexIndex = new byte[] {0, 1, 4, 1, 3, 4, 1, 2, 3}},
        new TransitionCellData{ geometryCounts = 0x64, vertexIndex = new byte[] {0, 1, 5, 1, 2, 5, 2, 4, 5, 2, 3, 4}},
        new TransitionCellData{ geometryCounts = 0x84, vertexIndex = new byte[] {0, 1, 3, 1, 2, 3, 4, 5, 6, 4, 6, 7}},
        new TransitionCellData{ geometryCounts = 0x73, vertexIndex = new byte[] {0, 1, 3, 1, 2, 3, 4, 5, 6}},
        new TransitionCellData{ geometryCounts = 0x84, vertexIndex = new byte[] {0, 1, 3, 1, 2, 3, 4, 5, 7, 5, 6, 7}},
        new TransitionCellData{ geometryCounts = 0x62, vertexIndex = new byte[] {0, 1, 2, 3, 4, 5}},
        new TransitionCellData{ geometryCounts = 0x53, vertexIndex = new byte[] {0, 1, 3, 0, 3, 4, 1, 2, 3}},
        new TransitionCellData{ geometryCounts = 0x75, vertexIndex = new byte[] {0, 1, 6, 1, 2, 6, 2, 5, 6, 2, 3, 5, 3, 4, 5}},
        new TransitionCellData{ geometryCounts = 0x84, vertexIndex = new byte[] {0, 1, 4, 1, 3, 4, 1, 2, 3, 5, 6, 7}},
        new TransitionCellData{ geometryCounts = 0x95, vertexIndex = new byte[] {0, 1, 4, 1, 3, 4, 1, 2, 3, 5, 6, 8, 6, 7, 8}},
        new TransitionCellData{ geometryCounts = 0xA6, vertexIndex = new byte[] {0, 1, 5, 1, 2, 5, 2, 4, 5, 2, 3, 4, 6, 7, 8, 6, 8, 9}},
        new TransitionCellData{ geometryCounts = 0x86, vertexIndex = new byte[] {0, 1, 7, 1, 2, 7, 2, 3, 7, 3, 6, 7, 3, 4, 6, 4, 5, 6}},
        new TransitionCellData{ geometryCounts = 0x95, vertexIndex = new byte[] {0, 1, 5, 1, 2, 5, 2, 4, 5, 2, 3, 4, 6, 7, 8}},
        new TransitionCellData{ geometryCounts = 0x95, vertexIndex = new byte[] {0, 1, 3, 1, 2, 3, 4, 5, 7, 4, 7, 8, 5, 6, 7}},
        new TransitionCellData{ geometryCounts = 0xA4, vertexIndex = new byte[] {0, 1, 3, 1, 2, 3, 4, 5, 6, 7, 8, 9}},
        new TransitionCellData{ geometryCounts = 0xC6, vertexIndex = new byte[] {0, 1, 3, 1, 2, 3, 4, 5, 7, 5, 6, 7, 8, 9, 10, 8, 10, 11}},
        new TransitionCellData{ geometryCounts = 0x64, vertexIndex = new byte[] {0, 1, 3, 1, 2, 3, 0, 3, 4, 0, 4, 5}},
        new TransitionCellData{ geometryCounts = 0x93, vertexIndex = new byte[] {0, 1, 2, 3, 4, 5, 6, 7, 8}},
        new TransitionCellData{ geometryCounts = 0x64, vertexIndex = new byte[] {0, 1, 4, 0, 4, 5, 1, 3, 4, 1, 2, 3}},
        new TransitionCellData{ geometryCounts = 0x97, vertexIndex = new byte[] {0, 1, 8, 1, 7, 8, 1, 2, 7, 2, 3, 7, 3, 4, 7, 4, 5, 7, 5, 6, 7}},
        new TransitionCellData{ geometryCounts = 0xB7, vertexIndex = new byte[] {0, 1, 6, 1, 2, 6, 2, 5, 6, 2, 3, 5, 3, 4, 5, 7, 8, 10, 8, 9, 10}},
        new TransitionCellData{ geometryCounts = 0xA6, vertexIndex = new byte[] {0, 1, 6, 1, 2, 6, 2, 5, 6, 2, 3, 5, 3, 4, 5, 7, 8, 9}},
        new TransitionCellData{ geometryCounts = 0xB5, vertexIndex = new byte[] {0, 1, 4, 1, 3, 4, 1, 2, 3, 5, 6, 7, 8, 9, 10}},
        new TransitionCellData{ geometryCounts = 0xA6, vertexIndex = new byte[] {0, 1, 5, 1, 2, 5, 2, 4, 5, 2, 3, 4, 6, 7, 9, 7, 8, 9}},
        new TransitionCellData{ geometryCounts = 0xA6, vertexIndex = new byte[] {0, 1, 4, 1, 3, 4, 1, 2, 3, 5, 6, 9, 6, 8, 9, 6, 7, 8}},
        new TransitionCellData{ geometryCounts = 0x97, vertexIndex = new byte[] {0, 1, 8, 1, 2, 8, 2, 3, 8, 3, 7, 8, 3, 4, 7, 4, 5, 7, 5, 6, 7}},
        new TransitionCellData{ geometryCounts = 0x86, vertexIndex = new byte[] {0, 1, 7, 1, 6, 7, 1, 2, 6, 2, 5, 6, 2, 4, 5, 2, 3, 4}},
        new TransitionCellData{ geometryCounts = 0xC8, vertexIndex = new byte[] {0, 1, 7, 1, 2, 7, 2, 3, 7, 3, 6, 7, 3, 4, 6, 4, 5, 6, 8, 9, 10, 8, 10, 11}},
        new TransitionCellData{ geometryCounts = 0xB7, vertexIndex = new byte[] {0, 1, 5, 1, 2, 5, 2, 4, 5, 2, 3, 4, 6, 9, 10, 6, 7, 9, 7, 8, 9}},
        new TransitionCellData{ geometryCounts = 0x75, vertexIndex = new byte[] {0, 1, 6, 1, 3, 6, 1, 2, 3, 3, 4, 6, 4, 5, 6}},
        new TransitionCellData{ geometryCounts = 0xA6, vertexIndex = new byte[] {0, 1, 3, 1, 2, 3, 4, 5, 9, 5, 8, 9, 5, 6, 8, 6, 7, 8}},
        new TransitionCellData{ geometryCounts = 0xC4, vertexIndex = new byte[] {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}},
        new TransitionCellData{ geometryCounts = 0x86, vertexIndex = new byte[] {1, 2, 4, 2, 3, 4, 0, 1, 7, 1, 4, 7, 4, 6, 7, 4, 5, 6}},
        new TransitionCellData{ geometryCounts = 0x64, vertexIndex = new byte[] {0, 4, 5, 0, 1, 4, 1, 3, 4, 1, 2, 3}},
        new TransitionCellData{ geometryCounts = 0x86, vertexIndex = new byte[] {0, 1, 4, 1, 3, 4, 1, 2, 3, 0, 4, 7, 4, 6, 7, 4, 5, 6}},
        new TransitionCellData{ geometryCounts = 0x97, vertexIndex = new byte[] {1, 2, 3, 1, 3, 4, 1, 4, 5, 0, 1, 8, 1, 5, 8, 5, 7, 8, 5, 6, 7}},
        new TransitionCellData{ geometryCounts = 0xA6, vertexIndex = new byte[] {0, 1, 3, 1, 2, 3, 4, 5, 9, 5, 8, 9, 5, 6, 8, 6, 7, 8}},
        new TransitionCellData{ geometryCounts = 0xC8, vertexIndex = new byte[] {0, 1, 5, 1, 2, 5, 2, 4, 5, 2, 3, 4, 6, 7, 11, 7, 10, 11, 7, 8, 10, 8, 9, 10}},
        new TransitionCellData{ geometryCounts = 0x97, vertexIndex = new byte[] {0, 1, 8, 1, 2, 8, 2, 7, 8, 2, 3, 7, 3, 6, 7, 3, 4, 6, 4, 5, 6}},
        new TransitionCellData{ geometryCounts = 0x97, vertexIndex = new byte[] {0, 1, 4, 1, 3, 4, 1, 2, 3, 0, 4, 8, 4, 7, 8, 4, 5, 7, 5, 6, 7}},
        new TransitionCellData{ geometryCounts = 0xB7, vertexIndex = new byte[] {0, 1, 5, 1, 2, 5, 2, 4, 5, 2, 3, 4, 6, 7, 10, 7, 9, 10, 7, 8, 9}},
        new TransitionCellData{ geometryCounts = 0xA8, vertexIndex = new byte[] {0, 1, 9, 1, 2, 9, 2, 8, 9, 2, 3, 8, 3, 7, 8, 3, 4, 7, 4, 6, 7, 4, 5, 6}},
        new TransitionCellData{ geometryCounts = 0xB9, vertexIndex = new byte[] {0, 1, 7, 1, 6, 7, 1, 2, 6, 2, 5, 6, 2, 3, 5, 3, 4, 5, 0, 7, 10, 7, 9, 10, 7, 8, 9}},
        new TransitionCellData{ geometryCounts = 0xA6, vertexIndex = new byte[] {0, 1, 5, 1, 4, 5, 1, 2, 4, 2, 3, 4, 6, 7, 9, 7, 8, 9}},
        new TransitionCellData{ geometryCounts = 0xC6, vertexIndex = new byte[] {0, 1, 5, 1, 2, 5, 2, 4, 5, 2, 3, 4, 6, 7, 8, 9, 10, 11}},
        new TransitionCellData{ geometryCounts = 0xB7, vertexIndex = new byte[] {0, 1, 7, 1, 2, 7, 2, 3, 7, 3, 6, 7, 3, 4, 6, 4, 5, 6, 8, 9, 10}},
        new TransitionCellData{ geometryCounts = 0xA8, vertexIndex = new byte[] {1, 2, 3, 1, 3, 4, 1, 4, 6, 4, 5, 6, 0, 1, 9, 1, 6, 9, 6, 8, 9, 6, 7, 8}},
        new TransitionCellData{ geometryCounts = 0xCC, vertexIndex = new byte[] {0, 1, 9, 1, 8, 9, 1, 2, 8, 2, 11, 8, 2, 3, 11, 3, 4, 11, 4, 5, 11, 5, 10, 11, 5, 6, 10, 6, 9, 10, 6, 7, 9, 7, 0, 9}},
        new TransitionCellData{ geometryCounts = 0x86, vertexIndex = new byte[] {0, 1, 2, 0, 2, 3, 0, 6, 7, 0, 3, 6, 1, 4, 5, 1, 5, 2}},
        new TransitionCellData{ geometryCounts = 0x97, vertexIndex = new byte[] {0, 1, 4, 1, 3, 4, 1, 2, 3, 2, 5, 6, 2, 6, 3, 0, 7, 8, 0, 4, 7}},
        new TransitionCellData{ geometryCounts = 0xA8, vertexIndex = new byte[] {0, 1, 5, 1, 4, 5, 1, 2, 4, 2, 3, 4, 3, 6, 7, 3, 7, 4, 0, 8, 9, 0, 5, 8}},
        new TransitionCellData{ geometryCounts = 0xA8, vertexIndex = new byte[] {0, 1, 5, 1, 4, 5, 1, 2, 4, 2, 3, 4, 2, 6, 3, 3, 6, 7, 0, 8, 9, 0, 5, 8}}
    };


    // The transitionCornerData table contains the transition cell corner reuse data
    // shown in Figure 4.18.

    private static readonly byte[] transitionCornerData = new byte[13]
    {
        0x30, 0x21, 0x20, 0x12, 0x40, 0x82, 0x10, 0x81, 0x80, 0x37, 0x27, 0x17, 0x87
    };

    // The transitionVertexData table gives the vertex locations for every one of the 512 possible
    // cases in the Tranvoxel Algorithm. Each 16-bit value also provides information about whether
    // a vertex can be reused from a neighboring cell. See Section 4.5 for details. The low byte
    // contains the indexes for the two endpoints of the edge on which the vertex lies, as numbered
    // in Figure 4.16. The high byte contains the vertex reuse data shown in Figure 4.17.

    private static readonly List<ushort>[] transitionVertexData = new List<ushort>[512]
    {
        new List<ushort>{},
        new List<ushort>{0x2301, 0x1503, 0x199B, 0x289A},
        new List<ushort>{0x2301, 0x2412, 0x4514},
        new List<ushort>{0x1503, 0x4514, 0x2412, 0x289A, 0x199B},
        new List<ushort>{0x8525, 0x2412, 0x289A, 0x89AC},
        new List<ushort>{0x8525, 0x2412, 0x2301, 0x1503, 0x199B, 0x89AC},
        new List<ushort>{0x8525, 0x4514, 0x2301, 0x289A, 0x89AC},
        new List<ushort>{0x8525, 0x4514, 0x1503, 0x199B, 0x89AC},
        new List<ushort>{0x8525, 0x8658, 0x4445},
        new List<ushort>{0x1503, 0x2301, 0x289A, 0x199B, 0x8658, 0x8525, 0x4445},
        new List<ushort>{0x8525, 0x8658, 0x4445, 0x2301, 0x2412, 0x4514},
        new List<ushort>{0x1503, 0x4514, 0x2412, 0x289A, 0x199B, 0x8658, 0x8525, 0x4445},
        new List<ushort>{0x2412, 0x4445, 0x8658, 0x89AC, 0x289A},
        new List<ushort>{0x8658, 0x4445, 0x2412, 0x2301, 0x1503, 0x199B, 0x89AC},
        new List<ushort>{0x8658, 0x4445, 0x4514, 0x2301, 0x289A, 0x89AC},
        new List<ushort>{0x8658, 0x4445, 0x4514, 0x1503, 0x199B, 0x89AC},
        new List<ushort>{0x8478, 0x8658, 0x89AC, 0x88BC},
        new List<ushort>{0x2301, 0x1503, 0x199B, 0x289A, 0x8478, 0x8658, 0x89AC, 0x88BC},
        new List<ushort>{0x8478, 0x8658, 0x89AC, 0x88BC, 0x2301, 0x2412, 0x4514},
        new List<ushort>{0x1503, 0x4514, 0x2412, 0x289A, 0x199B, 0x8658, 0x8478, 0x88BC, 0x89AC},
        new List<ushort>{0x8478, 0x8658, 0x8525, 0x2412, 0x289A, 0x88BC},
        new List<ushort>{0x8478, 0x8658, 0x8525, 0x2412, 0x2301, 0x1503, 0x199B, 0x88BC},
        new List<ushort>{0x2301, 0x4514, 0x8525, 0x8658, 0x8478, 0x88BC, 0x289A},
        new List<ushort>{0x8478, 0x8658, 0x8525, 0x4514, 0x1503, 0x199B, 0x88BC},
        new List<ushort>{0x8478, 0x4445, 0x8525, 0x89AC, 0x88BC},
        new List<ushort>{0x8478, 0x4445, 0x8525, 0x89AC, 0x88BC, 0x2301, 0x1503, 0x199B, 0x289A},
        new List<ushort>{0x8478, 0x4445, 0x8525, 0x89AC, 0x88BC, 0x2301, 0x2412, 0x4514},
        new List<ushort>{0x8478, 0x4445, 0x8525, 0x89AC, 0x88BC, 0x2412, 0x4514, 0x1503, 0x199B, 0x289A},
        new List<ushort>{0x8478, 0x4445, 0x2412, 0x289A, 0x88BC},
        new List<ushort>{0x1503, 0x2301, 0x2412, 0x4445, 0x8478, 0x88BC, 0x199B},
        new List<ushort>{0x2301, 0x4514, 0x4445, 0x8478, 0x88BC, 0x289A},
        new List<ushort>{0x1503, 0x4514, 0x4445, 0x8478, 0x88BC, 0x199B},
        new List<ushort>{0x8478, 0x8367, 0x4647},
        new List<ushort>{0x2301, 0x1503, 0x199B, 0x289A, 0x8478, 0x8367, 0x4647},
        new List<ushort>{0x2301, 0x2412, 0x4514, 0x8478, 0x8367, 0x4647},
        new List<ushort>{0x1503, 0x4514, 0x2412, 0x289A, 0x199B, 0x8367, 0x8478, 0x4647},
        new List<ushort>{0x2412, 0x8525, 0x89AC, 0x289A, 0x8367, 0x8478, 0x4647},
        new List<ushort>{0x8525, 0x2412, 0x2301, 0x1503, 0x199B, 0x89AC, 0x8478, 0x8367, 0x4647},
        new List<ushort>{0x8525, 0x4514, 0x2301, 0x289A, 0x89AC, 0x8478, 0x8367, 0x4647},
        new List<ushort>{0x8525, 0x4514, 0x1503, 0x199B, 0x89AC, 0x8478, 0x8367, 0x4647},
        new List<ushort>{0x8478, 0x8367, 0x4647, 0x8525, 0x8658, 0x4445},
        new List<ushort>{0x2301, 0x1503, 0x199B, 0x289A, 0x8478, 0x8367, 0x4647, 0x8525, 0x8658, 0x4445},
        new List<ushort>{0x8478, 0x8367, 0x4647, 0x8525, 0x8658, 0x4445, 0x2301, 0x2412, 0x4514},
        new List<ushort>{0x1503, 0x4514, 0x2412, 0x289A, 0x199B, 0x8658, 0x8525, 0x4445, 0x8367, 0x8478, 0x4647},
        new List<ushort>{0x2412, 0x4445, 0x8658, 0x89AC, 0x289A, 0x8367, 0x8478, 0x4647},
        new List<ushort>{0x8658, 0x4445, 0x2412, 0x2301, 0x1503, 0x199B, 0x89AC, 0x8478, 0x8367, 0x4647},
        new List<ushort>{0x2301, 0x4514, 0x4445, 0x8658, 0x89AC, 0x289A, 0x8367, 0x8478, 0x4647},
        new List<ushort>{0x8658, 0x4445, 0x4514, 0x1503, 0x199B, 0x89AC, 0x8478, 0x8367, 0x4647},
        new List<ushort>{0x8658, 0x4647, 0x8367, 0x88BC, 0x89AC},
        new List<ushort>{0x8658, 0x4647, 0x8367, 0x88BC, 0x89AC, 0x1503, 0x2301, 0x289A, 0x199B},
        new List<ushort>{0x8658, 0x4647, 0x8367, 0x88BC, 0x89AC, 0x2412, 0x2301, 0x4514},
        new List<ushort>{0x1503, 0x4514, 0x2412, 0x289A, 0x199B, 0x8658, 0x4647, 0x8367, 0x88BC, 0x89AC},
        new List<ushort>{0x8367, 0x4647, 0x8658, 0x8525, 0x2412, 0x289A, 0x88BC},
        new List<ushort>{0x1503, 0x2301, 0x2412, 0x8525, 0x8658, 0x4647, 0x8367, 0x88BC, 0x199B},
        new List<ushort>{0x8367, 0x4647, 0x8658, 0x8525, 0x4514, 0x2301, 0x289A, 0x88BC},
        new List<ushort>{0x8367, 0x4647, 0x8658, 0x8525, 0x4514, 0x1503, 0x199B, 0x88BC},
        new List<ushort>{0x8367, 0x4647, 0x4445, 0x8525, 0x89AC, 0x88BC},
        new List<ushort>{0x8367, 0x4647, 0x4445, 0x8525, 0x89AC, 0x88BC, 0x2301, 0x1503, 0x199B, 0x289A},
        new List<ushort>{0x8367, 0x4647, 0x4445, 0x8525, 0x89AC, 0x88BC, 0x2301, 0x2412, 0x4514},
        new List<ushort>{0x8525, 0x4445, 0x4647, 0x8367, 0x88BC, 0x89AC, 0x1503, 0x4514, 0x2412, 0x289A, 0x199B},
        new List<ushort>{0x8367, 0x4647, 0x4445, 0x2412, 0x289A, 0x88BC},
        new List<ushort>{0x8367, 0x4647, 0x4445, 0x2412, 0x2301, 0x1503, 0x199B, 0x88BC},
        new List<ushort>{0x2301, 0x4514, 0x4445, 0x4647, 0x8367, 0x88BC, 0x289A},
        new List<ushort>{0x8367, 0x4647, 0x4445, 0x4514, 0x1503, 0x199B, 0x88BC},
        new List<ushort>{0x1636, 0x8367, 0x88BC, 0x199B},
        new List<ushort>{0x2301, 0x1503, 0x1636, 0x8367, 0x88BC, 0x289A},
        new List<ushort>{0x8367, 0x1636, 0x199B, 0x88BC, 0x2412, 0x2301, 0x4514},
        new List<ushort>{0x2412, 0x4514, 0x1503, 0x1636, 0x8367, 0x88BC, 0x289A},
        new List<ushort>{0x8525, 0x2412, 0x289A, 0x89AC, 0x1636, 0x8367, 0x88BC, 0x199B},
        new List<ushort>{0x8525, 0x2412, 0x2301, 0x1503, 0x1636, 0x8367, 0x88BC, 0x89AC},
        new List<ushort>{0x8525, 0x4514, 0x2301, 0x289A, 0x89AC, 0x1636, 0x8367, 0x88BC, 0x199B},
        new List<ushort>{0x8367, 0x1636, 0x1503, 0x4514, 0x8525, 0x89AC, 0x88BC},
        new List<ushort>{0x1636, 0x8367, 0x88BC, 0x199B, 0x8525, 0x8658, 0x4445},
        new List<ushort>{0x2301, 0x1503, 0x1636, 0x8367, 0x88BC, 0x289A, 0x8525, 0x8658, 0x4445},
        new List<ushort>{0x1636, 0x8367, 0x88BC, 0x199B, 0x8525, 0x8658, 0x4445, 0x2301, 0x2412, 0x4514},
        new List<ushort>{0x2412, 0x4514, 0x1503, 0x1636, 0x8367, 0x88BC, 0x289A, 0x8525, 0x8658, 0x4445},
        new List<ushort>{0x2412, 0x4445, 0x8658, 0x89AC, 0x289A, 0x8367, 0x1636, 0x199B, 0x88BC},
        new List<ushort>{0x8367, 0x1636, 0x1503, 0x2301, 0x2412, 0x4445, 0x8658, 0x89AC, 0x88BC},
        new List<ushort>{0x8658, 0x4445, 0x4514, 0x2301, 0x289A, 0x89AC, 0x1636, 0x8367, 0x88BC, 0x199B},
        new List<ushort>{0x8658, 0x4445, 0x4514, 0x1503, 0x1636, 0x8367, 0x88BC, 0x89AC},
        new List<ushort>{0x1636, 0x8367, 0x8478, 0x8658, 0x89AC, 0x199B},
        new List<ushort>{0x2301, 0x1503, 0x1636, 0x8367, 0x8478, 0x8658, 0x89AC, 0x289A},
        new List<ushort>{0x1636, 0x8367, 0x8478, 0x8658, 0x89AC, 0x199B, 0x2301, 0x2412, 0x4514},
        new List<ushort>{0x8658, 0x8478, 0x8367, 0x1636, 0x1503, 0x4514, 0x2412, 0x289A, 0x89AC},
        new List<ushort>{0x1636, 0x8367, 0x8478, 0x8658, 0x8525, 0x2412, 0x289A, 0x199B},
        new List<ushort>{0x1636, 0x8367, 0x8478, 0x8658, 0x8525, 0x2412, 0x2301, 0x1503},
        new List<ushort>{0x1636, 0x8367, 0x8478, 0x8658, 0x8525, 0x4514, 0x2301, 0x289A, 0x199B},
        new List<ushort>{0x1503, 0x4514, 0x8525, 0x8658, 0x8478, 0x8367, 0x1636},
        new List<ushort>{0x8525, 0x4445, 0x8478, 0x8367, 0x1636, 0x199B, 0x89AC},
        new List<ushort>{0x2301, 0x1503, 0x1636, 0x8367, 0x8478, 0x4445, 0x8525, 0x89AC, 0x289A},
        new List<ushort>{0x8525, 0x4445, 0x8478, 0x8367, 0x1636, 0x199B, 0x89AC, 0x2412, 0x2301, 0x4514},
        new List<ushort>{0x2412, 0x4514, 0x1503, 0x1636, 0x8367, 0x8478, 0x4445, 0x8525, 0x89AC, 0x289A},
        new List<ushort>{0x1636, 0x8367, 0x8478, 0x4445, 0x2412, 0x289A, 0x199B},
        new List<ushort>{0x2412, 0x4445, 0x8478, 0x8367, 0x1636, 0x1503, 0x2301},
        new List<ushort>{0x2301, 0x4514, 0x4445, 0x8478, 0x8367, 0x1636, 0x199B, 0x289A},
        new List<ushort>{0x8367, 0x1636, 0x1503, 0x4514, 0x4445, 0x8478},
        new List<ushort>{0x1636, 0x4647, 0x8478, 0x88BC, 0x199B},
        new List<ushort>{0x8478, 0x4647, 0x1636, 0x1503, 0x2301, 0x289A, 0x88BC},
        new List<ushort>{0x1636, 0x4647, 0x8478, 0x88BC, 0x199B, 0x2301, 0x2412, 0x4514},
        new List<ushort>{0x2412, 0x4514, 0x1503, 0x1636, 0x4647, 0x8478, 0x88BC, 0x289A},
        new List<ushort>{0x1636, 0x4647, 0x8478, 0x88BC, 0x199B, 0x8525, 0x2412, 0x289A, 0x89AC},
        new List<ushort>{0x8525, 0x2412, 0x2301, 0x1503, 0x1636, 0x4647, 0x8478, 0x88BC, 0x89AC},
        new List<ushort>{0x8525, 0x4514, 0x2301, 0x289A, 0x89AC, 0x1636, 0x4647, 0x8478, 0x88BC, 0x199B},
        new List<ushort>{0x8478, 0x4647, 0x1636, 0x1503, 0x4514, 0x8525, 0x89AC, 0x88BC},
        new List<ushort>{0x1636, 0x4647, 0x8478, 0x88BC, 0x199B, 0x8525, 0x8658, 0x4445},
        new List<ushort>{0x8478, 0x4647, 0x1636, 0x1503, 0x2301, 0x289A, 0x88BC, 0x8658, 0x8525, 0x4445},
        new List<ushort>{0x1636, 0x4647, 0x8478, 0x88BC, 0x199B, 0x8525, 0x8658, 0x4445, 0x2301, 0x2412, 0x4514},
        new List<ushort>{0x2412, 0x4514, 0x1503, 0x1636, 0x4647, 0x8478, 0x88BC, 0x289A, 0x8525, 0x8658, 0x4445},
        new List<ushort>{0x1636, 0x4647, 0x8478, 0x88BC, 0x199B, 0x8658, 0x4445, 0x2412, 0x289A, 0x89AC},
        new List<ushort>{0x8658, 0x4445, 0x2412, 0x2301, 0x1503, 0x1636, 0x4647, 0x8478, 0x88BC, 0x89AC},
        new List<ushort>{0x8658, 0x4445, 0x4514, 0x2301, 0x289A, 0x89AC, 0x1636, 0x4647, 0x8478, 0x88BC, 0x199B},
        new List<ushort>{0x8478, 0x4647, 0x1636, 0x1503, 0x4514, 0x4445, 0x8658, 0x89AC, 0x88BC},
        new List<ushort>{0x1636, 0x4647, 0x8658, 0x89AC, 0x199B},
        new List<ushort>{0x2301, 0x1503, 0x1636, 0x4647, 0x8658, 0x89AC, 0x289A},
        new List<ushort>{0x1636, 0x4647, 0x8658, 0x89AC, 0x199B, 0x2301, 0x2412, 0x4514},
        new List<ushort>{0x2412, 0x4514, 0x1503, 0x1636, 0x4647, 0x8658, 0x89AC, 0x289A},
        new List<ushort>{0x2412, 0x8525, 0x8658, 0x4647, 0x1636, 0x199B, 0x289A},
        new List<ushort>{0x8658, 0x4647, 0x1636, 0x1503, 0x2301, 0x2412, 0x8525},
        new List<ushort>{0x2301, 0x4514, 0x8525, 0x8658, 0x4647, 0x1636, 0x199B, 0x289A},
        new List<ushort>{0x1503, 0x4514, 0x8525, 0x8658, 0x4647, 0x1636},
        new List<ushort>{0x8525, 0x4445, 0x4647, 0x1636, 0x199B, 0x89AC},
        new List<ushort>{0x8525, 0x4445, 0x4647, 0x1636, 0x1503, 0x2301, 0x289A, 0x89AC},
        new List<ushort>{0x8525, 0x4445, 0x4647, 0x1636, 0x199B, 0x89AC, 0x2412, 0x2301, 0x4514},
        new List<ushort>{0x2412, 0x4514, 0x1503, 0x1636, 0x4647, 0x4445, 0x8525, 0x89AC, 0x289A},
        new List<ushort>{0x2412, 0x4445, 0x4647, 0x1636, 0x199B, 0x289A},
        new List<ushort>{0x1503, 0x2301, 0x2412, 0x4445, 0x4647, 0x1636},
        new List<ushort>{0x2301, 0x4514, 0x4445, 0x4647, 0x1636, 0x199B, 0x289A},
        new List<ushort>{0x1503, 0x4514, 0x4445, 0x4647, 0x1636},
        new List<ushort>{0x1636, 0x1503, 0x4334},
        new List<ushort>{0x2301, 0x4334, 0x1636, 0x199B, 0x289A},
        new List<ushort>{0x2301, 0x2412, 0x4514, 0x1636, 0x1503, 0x4334},
        new List<ushort>{0x2412, 0x4514, 0x4334, 0x1636, 0x199B, 0x289A},
        new List<ushort>{0x8525, 0x2412, 0x289A, 0x89AC, 0x1636, 0x1503, 0x4334},
        new List<ushort>{0x1636, 0x4334, 0x2301, 0x2412, 0x8525, 0x89AC, 0x199B},
        new List<ushort>{0x8525, 0x4514, 0x2301, 0x289A, 0x89AC, 0x1636, 0x1503, 0x4334},
        new List<ushort>{0x1636, 0x4334, 0x4514, 0x8525, 0x89AC, 0x199B},
        new List<ushort>{0x1636, 0x1503, 0x4334, 0x8525, 0x8658, 0x4445},
        new List<ushort>{0x2301, 0x4334, 0x1636, 0x199B, 0x289A, 0x8525, 0x8658, 0x4445},
        new List<ushort>{0x8525, 0x8658, 0x4445, 0x2301, 0x2412, 0x4514, 0x1636, 0x1503, 0x4334},
        new List<ushort>{0x1636, 0x4334, 0x4514, 0x2412, 0x289A, 0x199B, 0x8658, 0x8525, 0x4445},
        new List<ushort>{0x2412, 0x4445, 0x8658, 0x89AC, 0x289A, 0x1503, 0x1636, 0x4334},
        new List<ushort>{0x8658, 0x4445, 0x2412, 0x2301, 0x4334, 0x1636, 0x199B, 0x89AC},
        new List<ushort>{0x8658, 0x4445, 0x4514, 0x2301, 0x289A, 0x89AC, 0x1636, 0x1503, 0x4334},
        new List<ushort>{0x1636, 0x4334, 0x4514, 0x4445, 0x8658, 0x89AC, 0x199B},
        new List<ushort>{0x8658, 0x8478, 0x88BC, 0x89AC, 0x1503, 0x1636, 0x4334},
        new List<ushort>{0x2301, 0x4334, 0x1636, 0x199B, 0x289A, 0x8478, 0x8658, 0x89AC, 0x88BC},
        new List<ushort>{0x8478, 0x8658, 0x89AC, 0x88BC, 0x2301, 0x2412, 0x4514, 0x1636, 0x1503, 0x4334},
        new List<ushort>{0x2412, 0x4514, 0x4334, 0x1636, 0x199B, 0x289A, 0x8478, 0x8658, 0x89AC, 0x88BC},
        new List<ushort>{0x8478, 0x8658, 0x8525, 0x2412, 0x289A, 0x88BC, 0x1636, 0x1503, 0x4334},
        new List<ushort>{0x8478, 0x8658, 0x8525, 0x2412, 0x2301, 0x4334, 0x1636, 0x199B, 0x88BC},
        new List<ushort>{0x2301, 0x4514, 0x8525, 0x8658, 0x8478, 0x88BC, 0x289A, 0x1503, 0x1636, 0x4334},
        new List<ushort>{0x1636, 0x4334, 0x4514, 0x8525, 0x8658, 0x8478, 0x88BC, 0x199B},
        new List<ushort>{0x8478, 0x4445, 0x8525, 0x89AC, 0x88BC, 0x1636, 0x1503, 0x4334},
        new List<ushort>{0x2301, 0x4334, 0x1636, 0x199B, 0x289A, 0x8478, 0x4445, 0x8525, 0x89AC, 0x88BC},
        new List<ushort>{0x8478, 0x4445, 0x8525, 0x89AC, 0x88BC, 0x2301, 0x2412, 0x4514, 0x1636, 0x1503, 0x4334},
        new List<ushort>{0x2412, 0x4514, 0x4334, 0x1636, 0x199B, 0x289A, 0x8478, 0x4445, 0x8525, 0x89AC, 0x88BC},
        new List<ushort>{0x8478, 0x4445, 0x2412, 0x289A, 0x88BC, 0x1636, 0x1503, 0x4334},
        new List<ushort>{0x1636, 0x4334, 0x2301, 0x2412, 0x4445, 0x8478, 0x88BC, 0x199B},
        new List<ushort>{0x2301, 0x4514, 0x4445, 0x8478, 0x88BC, 0x289A, 0x1503, 0x1636, 0x4334},
        new List<ushort>{0x1636, 0x4334, 0x4514, 0x4445, 0x8478, 0x88BC, 0x199B},
        new List<ushort>{0x1636, 0x1503, 0x4334, 0x8478, 0x8367, 0x4647},
        new List<ushort>{0x2301, 0x4334, 0x1636, 0x199B, 0x289A, 0x8478, 0x8367, 0x4647},
        new List<ushort>{0x2301, 0x2412, 0x4514, 0x1636, 0x1503, 0x4334, 0x8478, 0x8367, 0x4647},
        new List<ushort>{0x2412, 0x4514, 0x4334, 0x1636, 0x199B, 0x289A, 0x8478, 0x8367, 0x4647},
        new List<ushort>{0x8525, 0x2412, 0x289A, 0x89AC, 0x1636, 0x1503, 0x4334, 0x8478, 0x8367, 0x4647},
        new List<ushort>{0x1636, 0x4334, 0x2301, 0x2412, 0x8525, 0x89AC, 0x199B, 0x8367, 0x8478, 0x4647},
        new List<ushort>{0x8525, 0x4514, 0x2301, 0x289A, 0x89AC, 0x1636, 0x1503, 0x4334, 0x8478, 0x8367, 0x4647},
        new List<ushort>{0x1636, 0x4334, 0x4514, 0x8525, 0x89AC, 0x199B, 0x8367, 0x8478, 0x4647},
        new List<ushort>{0x1636, 0x1503, 0x4334, 0x8478, 0x8367, 0x4647, 0x8525, 0x8658, 0x4445},
        new List<ushort>{0x2301, 0x4334, 0x1636, 0x199B, 0x289A, 0x8478, 0x8367, 0x4647, 0x8525, 0x8658, 0x4445},
        new List<ushort>{0x2301, 0x2412, 0x4514, 0x1636, 0x1503, 0x4334, 0x8478, 0x8367, 0x4647, 0x8525, 0x8658, 0x4445},
        new List<ushort>{0x2412, 0x4514, 0x4334, 0x1636, 0x199B, 0x289A, 0x8478, 0x8367, 0x4647, 0x8525, 0x8658, 0x4445},
        new List<ushort>{0x2412, 0x4445, 0x8658, 0x89AC, 0x289A, 0x8367, 0x8478, 0x4647, 0x1503, 0x1636, 0x4334},
        new List<ushort>{0x8658, 0x4445, 0x2412, 0x2301, 0x4334, 0x1636, 0x199B, 0x89AC, 0x8478, 0x8367, 0x4647},
        new List<ushort>{0x8658, 0x4445, 0x4514, 0x2301, 0x289A, 0x89AC, 0x1636, 0x1503, 0x4334, 0x8478, 0x8367, 0x4647},
        new List<ushort>{0x8658, 0x4445, 0x4514, 0x4334, 0x1636, 0x199B, 0x89AC, 0x8478, 0x8367, 0x4647},
        new List<ushort>{0x8658, 0x4647, 0x8367, 0x88BC, 0x89AC, 0x1503, 0x1636, 0x4334},
        new List<ushort>{0x2301, 0x4334, 0x1636, 0x199B, 0x289A, 0x8367, 0x4647, 0x8658, 0x89AC, 0x88BC},
        new List<ushort>{0x8658, 0x4647, 0x8367, 0x88BC, 0x89AC, 0x1503, 0x1636, 0x4334, 0x2412, 0x2301, 0x4514},
        new List<ushort>{0x1636, 0x4334, 0x4514, 0x2412, 0x289A, 0x199B, 0x8658, 0x4647, 0x8367, 0x88BC, 0x89AC},
        new List<ushort>{0x8367, 0x4647, 0x8658, 0x8525, 0x2412, 0x289A, 0x88BC, 0x1636, 0x1503, 0x4334},
        new List<ushort>{0x8367, 0x4647, 0x8658, 0x8525, 0x2412, 0x2301, 0x4334, 0x1636, 0x199B, 0x88BC},
        new List<ushort>{0x8367, 0x4647, 0x8658, 0x8525, 0x4514, 0x2301, 0x289A, 0x88BC, 0x1636, 0x1503, 0x4334},
        new List<ushort>{0x8367, 0x4647, 0x8658, 0x8525, 0x4514, 0x4334, 0x1636, 0x199B, 0x88BC},
        new List<ushort>{0x8525, 0x4445, 0x4647, 0x8367, 0x88BC, 0x89AC, 0x1503, 0x1636, 0x4334},
        new List<ushort>{0x8367, 0x4647, 0x4445, 0x8525, 0x89AC, 0x88BC, 0x2301, 0x4334, 0x1636, 0x199B, 0x289A},
        new List<ushort>{0x8367, 0x4647, 0x4445, 0x8525, 0x89AC, 0x88BC, 0x2301, 0x2412, 0x4514, 0x1636, 0x1503, 0x4334},
        new List<ushort>{0x8367, 0x4647, 0x4445, 0x8525, 0x89AC, 0x88BC, 0x2412, 0x4514, 0x4334, 0x1636, 0x199B, 0x289A},
        new List<ushort>{0x8367, 0x4647, 0x4445, 0x2412, 0x289A, 0x88BC, 0x1636, 0x1503, 0x4334},
        new List<ushort>{0x1636, 0x4334, 0x2301, 0x2412, 0x4445, 0x4647, 0x8367, 0x88BC, 0x199B},
        new List<ushort>{0x8367, 0x4647, 0x4445, 0x4514, 0x2301, 0x289A, 0x88BC, 0x1636, 0x1503, 0x4334},
        new List<ushort>{0x8367, 0x4647, 0x4445, 0x4514, 0x4334, 0x1636, 0x199B, 0x88BC},
        new List<ushort>{0x8367, 0x4334, 0x1503, 0x199B, 0x88BC},
        new List<ushort>{0x2301, 0x4334, 0x8367, 0x88BC, 0x289A},
        new List<ushort>{0x8367, 0x4334, 0x1503, 0x199B, 0x88BC, 0x2412, 0x2301, 0x4514},
        new List<ushort>{0x2412, 0x4514, 0x4334, 0x8367, 0x88BC, 0x289A},
        new List<ushort>{0x8367, 0x4334, 0x1503, 0x199B, 0x88BC, 0x2412, 0x8525, 0x89AC, 0x289A},
        new List<ushort>{0x8525, 0x2412, 0x2301, 0x4334, 0x8367, 0x88BC, 0x89AC},
        new List<ushort>{0x8525, 0x4514, 0x2301, 0x289A, 0x89AC, 0x1503, 0x4334, 0x8367, 0x88BC, 0x199B},
        new List<ushort>{0x8367, 0x4334, 0x4514, 0x8525, 0x89AC, 0x88BC},
        new List<ushort>{0x8367, 0x4334, 0x1503, 0x199B, 0x88BC, 0x8658, 0x8525, 0x4445},
        new List<ushort>{0x2301, 0x4334, 0x8367, 0x88BC, 0x289A, 0x8525, 0x8658, 0x4445},
        new List<ushort>{0x8367, 0x4334, 0x1503, 0x199B, 0x88BC, 0x2412, 0x2301, 0x4514, 0x8658, 0x8525, 0x4445},
        new List<ushort>{0x2412, 0x4514, 0x4334, 0x8367, 0x88BC, 0x289A, 0x8525, 0x8658, 0x4445},
        new List<ushort>{0x2412, 0x4445, 0x8658, 0x89AC, 0x289A, 0x8367, 0x4334, 0x1503, 0x199B, 0x88BC},
        new List<ushort>{0x8658, 0x4445, 0x2412, 0x2301, 0x4334, 0x8367, 0x88BC, 0x89AC},
        new List<ushort>{0x2301, 0x4514, 0x4445, 0x8658, 0x89AC, 0x289A, 0x8367, 0x4334, 0x1503, 0x199B, 0x88BC},
        new List<ushort>{0x8658, 0x4445, 0x4514, 0x4334, 0x8367, 0x88BC, 0x89AC},
        new List<ushort>{0x1503, 0x4334, 0x8367, 0x8478, 0x8658, 0x89AC, 0x199B},
        new List<ushort>{0x8658, 0x8478, 0x8367, 0x4334, 0x2301, 0x289A, 0x89AC},
        new List<ushort>{0x1503, 0x4334, 0x8367, 0x8478, 0x8658, 0x89AC, 0x199B, 0x2301, 0x2412, 0x4514},
        new List<ushort>{0x2412, 0x4514, 0x4334, 0x8367, 0x8478, 0x8658, 0x89AC, 0x289A},
        new List<ushort>{0x2412, 0x8525, 0x8658, 0x8478, 0x8367, 0x4334, 0x1503, 0x199B, 0x289A},
        new List<ushort>{0x8367, 0x4334, 0x2301, 0x2412, 0x8525, 0x8658, 0x8478},
        new List<ushort>{0x1503, 0x4334, 0x8367, 0x8478, 0x8658, 0x8525, 0x4514, 0x2301, 0x289A, 0x199B},
        new List<ushort>{0x8658, 0x8478, 0x8367, 0x4334, 0x4514, 0x8525},
        new List<ushort>{0x1503, 0x4334, 0x8367, 0x8478, 0x4445, 0x8525, 0x89AC, 0x199B},
        new List<ushort>{0x8525, 0x4445, 0x8478, 0x8367, 0x4334, 0x2301, 0x289A, 0x89AC},
        new List<ushort>{0x1503, 0x4334, 0x8367, 0x8478, 0x4445, 0x8525, 0x89AC, 0x199B, 0x2301, 0x2412, 0x4514},
        new List<ushort>{0x8525, 0x4445, 0x8478, 0x8367, 0x4334, 0x4514, 0x2412, 0x289A, 0x89AC},
        new List<ushort>{0x1503, 0x4334, 0x8367, 0x8478, 0x4445, 0x2412, 0x289A, 0x199B},
        new List<ushort>{0x8367, 0x4334, 0x2301, 0x2412, 0x4445, 0x8478},
        new List<ushort>{0x1503, 0x4334, 0x8367, 0x8478, 0x4445, 0x4514, 0x2301, 0x289A, 0x199B},
        new List<ushort>{0x8367, 0x4334, 0x4514, 0x4445, 0x8478},
        new List<ushort>{0x1503, 0x4334, 0x4647, 0x8478, 0x88BC, 0x199B},
        new List<ushort>{0x8478, 0x4647, 0x4334, 0x2301, 0x289A, 0x88BC},
        new List<ushort>{0x8478, 0x4647, 0x4334, 0x1503, 0x199B, 0x88BC, 0x2412, 0x2301, 0x4514},
        new List<ushort>{0x8478, 0x4647, 0x4334, 0x4514, 0x2412, 0x289A, 0x88BC},
        new List<ushort>{0x1503, 0x4334, 0x4647, 0x8478, 0x88BC, 0x199B, 0x8525, 0x2412, 0x289A, 0x89AC},
        new List<ushort>{0x8478, 0x4647, 0x4334, 0x2301, 0x2412, 0x8525, 0x89AC, 0x88BC},
        new List<ushort>{0x1503, 0x4334, 0x4647, 0x8478, 0x88BC, 0x199B, 0x8525, 0x4514, 0x2301, 0x289A, 0x89AC},
        new List<ushort>{0x8478, 0x4647, 0x4334, 0x4514, 0x8525, 0x89AC, 0x88BC},
        new List<ushort>{0x1503, 0x4334, 0x4647, 0x8478, 0x88BC, 0x199B, 0x8525, 0x8658, 0x4445},
        new List<ushort>{0x8478, 0x4647, 0x4334, 0x2301, 0x289A, 0x88BC, 0x8658, 0x8525, 0x4445},
        new List<ushort>{0x1503, 0x4334, 0x4647, 0x8478, 0x88BC, 0x199B, 0x8525, 0x8658, 0x4445, 0x2301, 0x2412, 0x4514},
        new List<ushort>{0x2412, 0x4514, 0x4334, 0x4647, 0x8478, 0x88BC, 0x289A, 0x8525, 0x8658, 0x4445},
        new List<ushort>{0x8478, 0x4647, 0x4334, 0x1503, 0x199B, 0x88BC, 0x2412, 0x4445, 0x8658, 0x89AC, 0x289A},
        new List<ushort>{0x8658, 0x4445, 0x2412, 0x2301, 0x4334, 0x4647, 0x8478, 0x88BC, 0x89AC},
        new List<ushort>{0x8658, 0x4445, 0x4514, 0x2301, 0x289A, 0x89AC, 0x1503, 0x4334, 0x4647, 0x8478, 0x88BC, 0x199B},
        new List<ushort>{0x8658, 0x4445, 0x4514, 0x4334, 0x4647, 0x8478, 0x88BC, 0x89AC},
        new List<ushort>{0x1503, 0x4334, 0x4647, 0x8658, 0x89AC, 0x199B},
        new List<ushort>{0x8658, 0x4647, 0x4334, 0x2301, 0x289A, 0x89AC},
        new List<ushort>{0x1503, 0x4334, 0x4647, 0x8658, 0x89AC, 0x199B, 0x2301, 0x2412, 0x4514},
        new List<ushort>{0x2412, 0x4514, 0x4334, 0x4647, 0x8658, 0x89AC, 0x289A},
        new List<ushort>{0x1503, 0x4334, 0x4647, 0x8658, 0x8525, 0x2412, 0x289A, 0x199B},
        new List<ushort>{0x2412, 0x8525, 0x8658, 0x4647, 0x4334, 0x2301},
        new List<ushort>{0x2301, 0x4514, 0x8525, 0x8658, 0x4647, 0x4334, 0x1503, 0x199B, 0x289A},
        new List<ushort>{0x8658, 0x4647, 0x4334, 0x4514, 0x8525},
        new List<ushort>{0x8525, 0x4445, 0x4647, 0x4334, 0x1503, 0x199B, 0x89AC},
        new List<ushort>{0x8525, 0x4445, 0x4647, 0x4334, 0x2301, 0x289A, 0x89AC},
        new List<ushort>{0x1503, 0x4334, 0x4647, 0x4445, 0x8525, 0x89AC, 0x199B, 0x2301, 0x2412, 0x4514},
        new List<ushort>{0x2412, 0x4514, 0x4334, 0x4647, 0x4445, 0x8525, 0x89AC, 0x289A},
        new List<ushort>{0x1503, 0x4334, 0x4647, 0x4445, 0x2412, 0x289A, 0x199B},
        new List<ushort>{0x2412, 0x4445, 0x4647, 0x4334, 0x2301},
        new List<ushort>{0x1503, 0x4334, 0x4647, 0x4445, 0x4514, 0x2301, 0x289A, 0x199B},
        new List<ushort>{0x4514, 0x4445, 0x4647, 0x4334},
        new List<ushort>{0x4514, 0x4445, 0x4647, 0x4334},
        new List<ushort>{0x2301, 0x1503, 0x199B, 0x289A, 0x4334, 0x4514, 0x4445, 0x4647},
        new List<ushort>{0x2412, 0x4445, 0x4647, 0x4334, 0x2301},
        new List<ushort>{0x1503, 0x4334, 0x4647, 0x4445, 0x2412, 0x289A, 0x199B},
        new List<ushort>{0x8525, 0x2412, 0x289A, 0x89AC, 0x4514, 0x4445, 0x4647, 0x4334},
        new List<ushort>{0x8525, 0x2412, 0x2301, 0x1503, 0x199B, 0x89AC, 0x4514, 0x4445, 0x4647, 0x4334},
        new List<ushort>{0x8525, 0x4445, 0x4647, 0x4334, 0x2301, 0x289A, 0x89AC},
        new List<ushort>{0x8525, 0x4445, 0x4647, 0x4334, 0x1503, 0x199B, 0x89AC},
        new List<ushort>{0x8658, 0x4647, 0x4334, 0x4514, 0x8525},
        new List<ushort>{0x1503, 0x2301, 0x289A, 0x199B, 0x8525, 0x4514, 0x4334, 0x4647, 0x8658},
        new List<ushort>{0x2412, 0x8525, 0x8658, 0x4647, 0x4334, 0x2301},
        new List<ushort>{0x1503, 0x4334, 0x4647, 0x8658, 0x8525, 0x2412, 0x289A, 0x199B},
        new List<ushort>{0x2412, 0x4514, 0x4334, 0x4647, 0x8658, 0x89AC, 0x289A},
        new List<ushort>{0x8658, 0x4647, 0x4334, 0x4514, 0x2412, 0x2301, 0x1503, 0x199B, 0x89AC},
        new List<ushort>{0x8658, 0x4647, 0x4334, 0x2301, 0x289A, 0x89AC},
        new List<ushort>{0x1503, 0x4334, 0x4647, 0x8658, 0x89AC, 0x199B},
        new List<ushort>{0x8478, 0x8658, 0x89AC, 0x88BC, 0x4445, 0x4647, 0x4334, 0x4514},
        new List<ushort>{0x2301, 0x1503, 0x199B, 0x289A, 0x8478, 0x8658, 0x89AC, 0x88BC, 0x4334, 0x4514, 0x4445, 0x4647},
        new List<ushort>{0x8478, 0x8658, 0x89AC, 0x88BC, 0x2412, 0x4445, 0x4647, 0x4334, 0x2301},
        new List<ushort>{0x1503, 0x4334, 0x4647, 0x4445, 0x2412, 0x289A, 0x199B, 0x8658, 0x8478, 0x88BC, 0x89AC},
        new List<ushort>{0x8478, 0x8658, 0x8525, 0x2412, 0x289A, 0x88BC, 0x4445, 0x4647, 0x4334, 0x4514},
        new List<ushort>{0x8478, 0x8658, 0x8525, 0x2412, 0x2301, 0x1503, 0x199B, 0x88BC, 0x4514, 0x4445, 0x4647, 0x4334},
        new List<ushort>{0x2301, 0x4334, 0x4647, 0x4445, 0x8525, 0x8658, 0x8478, 0x88BC, 0x289A},
        new List<ushort>{0x8478, 0x8658, 0x8525, 0x4445, 0x4647, 0x4334, 0x1503, 0x199B, 0x88BC},
        new List<ushort>{0x8478, 0x4647, 0x4334, 0x4514, 0x8525, 0x89AC, 0x88BC},
        new List<ushort>{0x8478, 0x4647, 0x4334, 0x4514, 0x8525, 0x89AC, 0x88BC, 0x2301, 0x1503, 0x199B, 0x289A},
        new List<ushort>{0x8478, 0x4647, 0x4334, 0x2301, 0x2412, 0x8525, 0x89AC, 0x88BC},
        new List<ushort>{0x8478, 0x4647, 0x4334, 0x1503, 0x2412, 0x8525, 0x199B, 0x289A, 0x89AC, 0x88BC},
        new List<ushort>{0x8478, 0x4647, 0x4334, 0x4514, 0x2412, 0x289A, 0x88BC},
        new List<ushort>{0x1503, 0x2301, 0x2412, 0x4514, 0x4334, 0x4647, 0x8478, 0x88BC, 0x199B},
        new List<ushort>{0x8478, 0x4647, 0x4334, 0x2301, 0x289A, 0x88BC},
        new List<ushort>{0x1503, 0x4334, 0x4647, 0x8478, 0x88BC, 0x199B},
        new List<ushort>{0x8367, 0x4334, 0x4514, 0x4445, 0x8478},
        new List<ushort>{0x2301, 0x1503, 0x199B, 0x289A, 0x8367, 0x4334, 0x4514, 0x4445, 0x8478},
        new List<ushort>{0x8367, 0x4334, 0x2301, 0x2412, 0x4445, 0x8478},
        new List<ushort>{0x1503, 0x4334, 0x8367, 0x8478, 0x4445, 0x2412, 0x289A, 0x199B},
        new List<ushort>{0x2412, 0x8525, 0x89AC, 0x289A, 0x8478, 0x4445, 0x4514, 0x4334, 0x8367},
        new List<ushort>{0x8525, 0x2412, 0x2301, 0x1503, 0x199B, 0x89AC, 0x8367, 0x4334, 0x4514, 0x4445, 0x8478},
        new List<ushort>{0x8525, 0x4445, 0x8478, 0x8367, 0x4334, 0x2301, 0x289A, 0x89AC},
        new List<ushort>{0x1503, 0x4334, 0x8367, 0x8478, 0x4445, 0x8525, 0x89AC, 0x199B},
        new List<ushort>{0x8658, 0x8478, 0x8367, 0x4334, 0x4514, 0x8525},
        new List<ushort>{0x2301, 0x1503, 0x199B, 0x289A, 0x8367, 0x4334, 0x4514, 0x8525, 0x8658, 0x8478},
        new List<ushort>{0x8367, 0x4334, 0x2301, 0x2412, 0x8525, 0x8658, 0x8478},
        new List<ushort>{0x2412, 0x8525, 0x8658, 0x8478, 0x8367, 0x4334, 0x1503, 0x199B, 0x289A},
        new List<ushort>{0x2412, 0x4514, 0x4334, 0x8367, 0x8478, 0x8658, 0x89AC, 0x289A},
        new List<ushort>{0x8658, 0x8478, 0x8367, 0x4334, 0x4514, 0x2412, 0x2301, 0x1503, 0x199B, 0x89AC},
        new List<ushort>{0x8658, 0x8478, 0x8367, 0x4334, 0x2301, 0x289A, 0x89AC},
        new List<ushort>{0x1503, 0x4334, 0x8367, 0x8478, 0x8658, 0x89AC, 0x199B},
        new List<ushort>{0x8658, 0x4445, 0x4514, 0x4334, 0x8367, 0x88BC, 0x89AC},
        new List<ushort>{0x8658, 0x4445, 0x4514, 0x4334, 0x8367, 0x88BC, 0x89AC, 0x1503, 0x2301, 0x289A, 0x199B},
        new List<ushort>{0x8658, 0x4445, 0x2412, 0x2301, 0x4334, 0x8367, 0x88BC, 0x89AC},
        new List<ushort>{0x8658, 0x4445, 0x2412, 0x1503, 0x4334, 0x8367, 0x289A, 0x199B, 0x88BC, 0x89AC},
        new List<ushort>{0x8367, 0x4334, 0x4514, 0x4445, 0x8658, 0x8525, 0x2412, 0x289A, 0x88BC},
        new List<ushort>{0x1503, 0x2301, 0x2412, 0x8525, 0x8658, 0x4445, 0x4514, 0x4334, 0x8367, 0x88BC, 0x199B},
        new List<ushort>{0x2301, 0x4334, 0x8367, 0x88BC, 0x289A, 0x8525, 0x8658, 0x4445},
        new List<ushort>{0x8367, 0x4334, 0x1503, 0x199B, 0x88BC, 0x8658, 0x8525, 0x4445},
        new List<ushort>{0x8367, 0x4334, 0x4514, 0x8525, 0x89AC, 0x88BC},
        new List<ushort>{0x8367, 0x4334, 0x4514, 0x8525, 0x89AC, 0x88BC, 0x2301, 0x1503, 0x199B, 0x289A},
        new List<ushort>{0x8525, 0x2412, 0x2301, 0x4334, 0x8367, 0x88BC, 0x89AC},
        new List<ushort>{0x1503, 0x4334, 0x8367, 0x8525, 0x2412, 0x88BC, 0x89AC, 0x289A, 0x199B},
        new List<ushort>{0x2412, 0x4514, 0x4334, 0x8367, 0x88BC, 0x289A},
        new List<ushort>{0x1503, 0x2301, 0x2412, 0x4514, 0x4334, 0x8367, 0x88BC, 0x199B},
        new List<ushort>{0x2301, 0x4334, 0x8367, 0x88BC, 0x289A},
        new List<ushort>{0x8367, 0x4334, 0x1503, 0x199B, 0x88BC},
        new List<ushort>{0x1636, 0x8367, 0x88BC, 0x199B, 0x4647, 0x4334, 0x4514, 0x4445},
        new List<ushort>{0x2301, 0x1503, 0x1636, 0x8367, 0x88BC, 0x289A, 0x4334, 0x4514, 0x4445, 0x4647},
        new List<ushort>{0x8367, 0x1636, 0x199B, 0x88BC, 0x2301, 0x4334, 0x4647, 0x4445, 0x2412},
        new List<ushort>{0x2412, 0x4445, 0x4647, 0x4334, 0x1503, 0x1636, 0x8367, 0x88BC, 0x289A},
        new List<ushort>{0x8525, 0x2412, 0x289A, 0x89AC, 0x1636, 0x8367, 0x88BC, 0x199B, 0x4514, 0x4445, 0x4647, 0x4334},
        new List<ushort>{0x8525, 0x2412, 0x2301, 0x1503, 0x1636, 0x8367, 0x88BC, 0x89AC, 0x4334, 0x4514, 0x4445, 0x4647},
        new List<ushort>{0x8525, 0x4445, 0x4647, 0x4334, 0x2301, 0x289A, 0x89AC, 0x1636, 0x8367, 0x88BC, 0x199B},
        new List<ushort>{0x8367, 0x1636, 0x1503, 0x4334, 0x4647, 0x4445, 0x8525, 0x89AC, 0x88BC},
        new List<ushort>{0x1636, 0x8367, 0x88BC, 0x199B, 0x8658, 0x4647, 0x4334, 0x4514, 0x8525},
        new List<ushort>{0x2301, 0x1503, 0x1636, 0x8367, 0x88BC, 0x289A, 0x8658, 0x4647, 0x4334, 0x4514, 0x8525},
        new List<ushort>{0x1636, 0x8367, 0x88BC, 0x199B, 0x8658, 0x4647, 0x4334, 0x2301, 0x2412, 0x8525},
        new List<ushort>{0x2412, 0x8525, 0x8658, 0x4647, 0x4334, 0x1503, 0x1636, 0x8367, 0x88BC, 0x289A},
        new List<ushort>{0x2412, 0x4514, 0x4334, 0x4647, 0x8658, 0x89AC, 0x289A, 0x8367, 0x1636, 0x199B, 0x88BC},
        new List<ushort>{0x8367, 0x1636, 0x1503, 0x2301, 0x2412, 0x4514, 0x4334, 0x4647, 0x8658, 0x89AC, 0x88BC},
        new List<ushort>{0x8658, 0x4647, 0x4334, 0x2301, 0x289A, 0x89AC, 0x1636, 0x8367, 0x88BC, 0x199B},
        new List<ushort>{0x8367, 0x1636, 0x1503, 0x4334, 0x4647, 0x8658, 0x89AC, 0x88BC},
        new List<ushort>{0x1636, 0x8367, 0x8478, 0x8658, 0x89AC, 0x199B, 0x4647, 0x4334, 0x4514, 0x4445},
        new List<ushort>{0x2301, 0x1503, 0x1636, 0x8367, 0x8478, 0x8658, 0x89AC, 0x289A, 0x4647, 0x4334, 0x4514, 0x4445},
        new List<ushort>{0x1636, 0x8367, 0x8478, 0x8658, 0x89AC, 0x199B, 0x2412, 0x4445, 0x4647, 0x4334, 0x2301},
        new List<ushort>{0x8658, 0x8478, 0x8367, 0x1636, 0x1503, 0x4334, 0x4647, 0x4445, 0x2412, 0x289A, 0x89AC},
        new List<ushort>{0x1636, 0x8367, 0x8478, 0x8658, 0x8525, 0x2412, 0x289A, 0x199B, 0x4445, 0x4647, 0x4334, 0x4514},
        new List<ushort>{0x2301, 0x1503, 0x1636, 0x8367, 0x8478, 0x8658, 0x8525, 0x2412, 0x4334, 0x4514, 0x4445, 0x4647},
        new List<ushort>{0x1636, 0x8367, 0x8478, 0x8658, 0x8525, 0x4445, 0x4647, 0x4334, 0x2301, 0x289A, 0x199B},
        new List<ushort>{0x1503, 0x1636, 0x8367, 0x8478, 0x8658, 0x8525, 0x4445, 0x4647, 0x4334},
        new List<ushort>{0x8525, 0x4514, 0x4334, 0x4647, 0x8478, 0x8367, 0x1636, 0x199B, 0x89AC},
        new List<ushort>{0x2301, 0x1503, 0x1636, 0x8367, 0x8478, 0x4647, 0x4334, 0x4514, 0x8525, 0x89AC, 0x289A},
        new List<ushort>{0x8525, 0x2412, 0x2301, 0x4334, 0x4647, 0x8478, 0x8367, 0x1636, 0x199B, 0x89AC},
        new List<ushort>{0x2412, 0x8525, 0x89AC, 0x289A, 0x1503, 0x1636, 0x8367, 0x8478, 0x4647, 0x4334},
        new List<ushort>{0x1636, 0x8367, 0x8478, 0x4647, 0x4334, 0x4514, 0x2412, 0x289A, 0x199B},
        new List<ushort>{0x2412, 0x2301, 0x1503, 0x1636, 0x8367, 0x8478, 0x4647, 0x4334, 0x4514},
        new List<ushort>{0x1636, 0x8367, 0x8478, 0x4647, 0x4334, 0x2301, 0x289A, 0x199B},
        new List<ushort>{0x1636, 0x8367, 0x8478, 0x4647, 0x4334, 0x1503},
        new List<ushort>{0x1636, 0x4334, 0x4514, 0x4445, 0x8478, 0x88BC, 0x199B},
        new List<ushort>{0x8478, 0x4445, 0x4514, 0x4334, 0x1636, 0x1503, 0x2301, 0x289A, 0x88BC},
        new List<ushort>{0x1636, 0x4334, 0x2301, 0x2412, 0x4445, 0x8478, 0x88BC, 0x199B},
        new List<ushort>{0x8478, 0x4445, 0x2412, 0x289A, 0x88BC, 0x1636, 0x1503, 0x4334},
        new List<ushort>{0x1636, 0x4334, 0x4514, 0x4445, 0x8478, 0x88BC, 0x199B, 0x8525, 0x2412, 0x289A, 0x89AC},
        new List<ushort>{0x8525, 0x2412, 0x2301, 0x1503, 0x1636, 0x4334, 0x4514, 0x4445, 0x8478, 0x88BC, 0x89AC},
        new List<ushort>{0x1636, 0x4334, 0x2301, 0x8525, 0x4445, 0x8478, 0x289A, 0x89AC, 0x88BC, 0x199B},
        new List<ushort>{0x8478, 0x4445, 0x8525, 0x89AC, 0x88BC, 0x1636, 0x1503, 0x4334},
        new List<ushort>{0x1636, 0x4334, 0x4514, 0x8525, 0x8658, 0x8478, 0x88BC, 0x199B},
        new List<ushort>{0x8478, 0x8658, 0x8525, 0x4514, 0x4334, 0x1636, 0x1503, 0x2301, 0x289A, 0x88BC},
        new List<ushort>{0x8478, 0x8658, 0x8525, 0x2412, 0x2301, 0x4334, 0x1636, 0x199B, 0x88BC},
        new List<ushort>{0x8478, 0x8658, 0x8525, 0x2412, 0x289A, 0x88BC, 0x1636, 0x1503, 0x4334},
        new List<ushort>{0x1636, 0x4334, 0x4514, 0x2412, 0x8658, 0x8478, 0x289A, 0x89AC, 0x88BC, 0x199B},
        new List<ushort>{0x8658, 0x8478, 0x88BC, 0x89AC, 0x2412, 0x2301, 0x1503, 0x1636, 0x4334, 0x4514},
        new List<ushort>{0x1636, 0x4334, 0x2301, 0x8658, 0x8478, 0x289A, 0x89AC, 0x88BC, 0x199B},
        new List<ushort>{0x8658, 0x8478, 0x88BC, 0x89AC, 0x1503, 0x1636, 0x4334},
        new List<ushort>{0x1636, 0x4334, 0x4514, 0x4445, 0x8658, 0x89AC, 0x199B},
        new List<ushort>{0x2301, 0x1503, 0x1636, 0x4334, 0x4514, 0x4445, 0x8658, 0x89AC, 0x289A},
        new List<ushort>{0x8658, 0x4445, 0x2412, 0x2301, 0x4334, 0x1636, 0x199B, 0x89AC},
        new List<ushort>{0x2412, 0x4445, 0x8658, 0x89AC, 0x289A, 0x1503, 0x1636, 0x4334},
        new List<ushort>{0x2412, 0x8525, 0x8658, 0x4445, 0x4514, 0x4334, 0x1636, 0x199B, 0x289A},
        new List<ushort>{0x8658, 0x8525, 0x2412, 0x2301, 0x1503, 0x1636, 0x4334, 0x4514, 0x4445},
        new List<ushort>{0x2301, 0x4334, 0x1636, 0x199B, 0x289A, 0x8525, 0x8658, 0x4445},
        new List<ushort>{0x1636, 0x1503, 0x4334, 0x8525, 0x8658, 0x4445},
        new List<ushort>{0x1636, 0x4334, 0x4514, 0x8525, 0x89AC, 0x199B},
        new List<ushort>{0x2301, 0x1503, 0x1636, 0x4334, 0x4514, 0x8525, 0x89AC, 0x289A},
        new List<ushort>{0x1636, 0x4334, 0x2301, 0x2412, 0x8525, 0x89AC, 0x199B},
        new List<ushort>{0x8525, 0x2412, 0x289A, 0x89AC, 0x1636, 0x1503, 0x4334},
        new List<ushort>{0x2412, 0x4514, 0x4334, 0x1636, 0x199B, 0x289A},
        new List<ushort>{0x2301, 0x1503, 0x1636, 0x4334, 0x4514, 0x2412},
        new List<ushort>{0x2301, 0x4334, 0x1636, 0x199B, 0x289A},
        new List<ushort>{0x1636, 0x1503, 0x4334},
        new List<ushort>{0x1503, 0x4514, 0x4445, 0x4647, 0x1636},
        new List<ushort>{0x2301, 0x4514, 0x4445, 0x4647, 0x1636, 0x199B, 0x289A},
        new List<ushort>{0x1503, 0x2301, 0x2412, 0x4445, 0x4647, 0x1636},
        new List<ushort>{0x2412, 0x4445, 0x4647, 0x1636, 0x199B, 0x289A},
        new List<ushort>{0x8525, 0x2412, 0x289A, 0x89AC, 0x1503, 0x4514, 0x4445, 0x4647, 0x1636},
        new List<ushort>{0x1636, 0x4647, 0x4445, 0x4514, 0x2301, 0x2412, 0x8525, 0x89AC, 0x199B},
        new List<ushort>{0x8525, 0x4445, 0x4647, 0x1636, 0x1503, 0x2301, 0x289A, 0x89AC},
        new List<ushort>{0x8525, 0x4445, 0x4647, 0x1636, 0x199B, 0x89AC},
        new List<ushort>{0x1503, 0x4514, 0x8525, 0x8658, 0x4647, 0x1636},
        new List<ushort>{0x2301, 0x4514, 0x8525, 0x8658, 0x4647, 0x1636, 0x199B, 0x289A},
        new List<ushort>{0x8658, 0x4647, 0x1636, 0x1503, 0x2301, 0x2412, 0x8525},
        new List<ushort>{0x2412, 0x8525, 0x8658, 0x4647, 0x1636, 0x199B, 0x289A},
        new List<ushort>{0x2412, 0x4514, 0x1503, 0x1636, 0x4647, 0x8658, 0x89AC, 0x289A},
        new List<ushort>{0x1636, 0x4647, 0x8658, 0x89AC, 0x199B, 0x2301, 0x2412, 0x4514},
        new List<ushort>{0x2301, 0x1503, 0x1636, 0x4647, 0x8658, 0x89AC, 0x289A},
        new List<ushort>{0x1636, 0x4647, 0x8658, 0x89AC, 0x199B},
        new List<ushort>{0x8658, 0x8478, 0x88BC, 0x89AC, 0x1636, 0x4647, 0x4445, 0x4514, 0x1503},
        new List<ushort>{0x2301, 0x4514, 0x4445, 0x4647, 0x1636, 0x199B, 0x289A, 0x8478, 0x8658, 0x89AC, 0x88BC},
        new List<ushort>{0x8478, 0x8658, 0x89AC, 0x88BC, 0x2412, 0x4445, 0x4647, 0x1636, 0x1503, 0x2301},
        new List<ushort>{0x2412, 0x4445, 0x4647, 0x1636, 0x199B, 0x289A, 0x8478, 0x8658, 0x89AC, 0x88BC},
        new List<ushort>{0x8478, 0x8658, 0x8525, 0x2412, 0x289A, 0x88BC, 0x1503, 0x4514, 0x4445, 0x4647, 0x1636},
        new List<ushort>{0x8478, 0x8658, 0x8525, 0x2412, 0x2301, 0x4514, 0x4445, 0x4647, 0x1636, 0x199B, 0x88BC},
        new List<ushort>{0x2301, 0x1503, 0x1636, 0x4647, 0x4445, 0x8525, 0x8658, 0x8478, 0x88BC, 0x289A},
        new List<ushort>{0x8478, 0x8658, 0x8525, 0x4445, 0x4647, 0x1636, 0x199B, 0x88BC},
        new List<ushort>{0x8478, 0x4647, 0x1636, 0x1503, 0x4514, 0x8525, 0x89AC, 0x88BC},
        new List<ushort>{0x2301, 0x4514, 0x8525, 0x8478, 0x4647, 0x1636, 0x89AC, 0x88BC, 0x199B, 0x289A},
        new List<ushort>{0x8525, 0x2412, 0x2301, 0x1503, 0x1636, 0x4647, 0x8478, 0x88BC, 0x89AC},
        new List<ushort>{0x8478, 0x4647, 0x1636, 0x2412, 0x8525, 0x199B, 0x289A, 0x89AC, 0x88BC},
        new List<ushort>{0x2412, 0x4514, 0x1503, 0x1636, 0x4647, 0x8478, 0x88BC, 0x289A},
        new List<ushort>{0x1636, 0x4647, 0x8478, 0x88BC, 0x199B, 0x2301, 0x2412, 0x4514},
        new List<ushort>{0x8478, 0x4647, 0x1636, 0x1503, 0x2301, 0x289A, 0x88BC},
        new List<ushort>{0x1636, 0x4647, 0x8478, 0x88BC, 0x199B},
        new List<ushort>{0x8367, 0x1636, 0x1503, 0x4514, 0x4445, 0x8478},
        new List<ushort>{0x2301, 0x4514, 0x4445, 0x8478, 0x8367, 0x1636, 0x199B, 0x289A},
        new List<ushort>{0x2412, 0x4445, 0x8478, 0x8367, 0x1636, 0x1503, 0x2301},
        new List<ushort>{0x1636, 0x8367, 0x8478, 0x4445, 0x2412, 0x289A, 0x199B},
        new List<ushort>{0x8525, 0x2412, 0x289A, 0x89AC, 0x1503, 0x4514, 0x4445, 0x8478, 0x8367, 0x1636},
        new List<ushort>{0x1636, 0x8367, 0x8478, 0x4445, 0x4514, 0x2301, 0x2412, 0x8525, 0x89AC, 0x199B},
        new List<ushort>{0x2301, 0x1503, 0x1636, 0x8367, 0x8478, 0x4445, 0x8525, 0x89AC, 0x289A},
        new List<ushort>{0x8525, 0x4445, 0x8478, 0x8367, 0x1636, 0x199B, 0x89AC},
        new List<ushort>{0x1503, 0x4514, 0x8525, 0x8658, 0x8478, 0x8367, 0x1636},
        new List<ushort>{0x1636, 0x8367, 0x8478, 0x8658, 0x8525, 0x4514, 0x2301, 0x289A, 0x199B},
        new List<ushort>{0x1636, 0x8367, 0x8478, 0x8658, 0x8525, 0x2412, 0x2301, 0x1503},
        new List<ushort>{0x1636, 0x8367, 0x8478, 0x8658, 0x8525, 0x2412, 0x289A, 0x199B},
        new List<ushort>{0x8658, 0x8478, 0x8367, 0x1636, 0x1503, 0x4514, 0x2412, 0x289A, 0x89AC},
        new List<ushort>{0x1636, 0x8367, 0x8478, 0x8658, 0x89AC, 0x199B, 0x2301, 0x2412, 0x4514},
        new List<ushort>{0x2301, 0x1503, 0x1636, 0x8367, 0x8478, 0x8658, 0x89AC, 0x289A},
        new List<ushort>{0x1636, 0x8367, 0x8478, 0x8658, 0x89AC, 0x199B},
        new List<ushort>{0x8658, 0x4445, 0x4514, 0x1503, 0x1636, 0x8367, 0x88BC, 0x89AC},
        new List<ushort>{0x2301, 0x4514, 0x4445, 0x8658, 0x8367, 0x1636, 0x89AC, 0x88BC, 0x199B, 0x289A},
        new List<ushort>{0x8367, 0x1636, 0x1503, 0x2301, 0x2412, 0x4445, 0x8658, 0x89AC, 0x88BC},
        new List<ushort>{0x8658, 0x4445, 0x2412, 0x1636, 0x8367, 0x289A, 0x199B, 0x88BC, 0x89AC},
        new List<ushort>{0x8367, 0x1636, 0x1503, 0x4514, 0x4445, 0x8658, 0x8525, 0x2412, 0x289A, 0x88BC},
        new List<ushort>{0x8367, 0x1636, 0x199B, 0x88BC, 0x8658, 0x8525, 0x2412, 0x2301, 0x4514, 0x4445},
        new List<ushort>{0x2301, 0x1503, 0x1636, 0x8367, 0x88BC, 0x289A, 0x8525, 0x8658, 0x4445},
        new List<ushort>{0x1636, 0x8367, 0x88BC, 0x199B, 0x8525, 0x8658, 0x4445},
        new List<ushort>{0x8367, 0x1636, 0x1503, 0x4514, 0x8525, 0x89AC, 0x88BC},
        new List<ushort>{0x2301, 0x4514, 0x8525, 0x8367, 0x1636, 0x89AC, 0x88BC, 0x199B, 0x289A},
        new List<ushort>{0x8525, 0x2412, 0x2301, 0x1503, 0x1636, 0x8367, 0x88BC, 0x89AC},
        new List<ushort>{0x2412, 0x8525, 0x8367, 0x1636, 0x89AC, 0x88BC, 0x199B, 0x289A},
        new List<ushort>{0x2412, 0x4514, 0x1503, 0x1636, 0x8367, 0x88BC, 0x289A},
        new List<ushort>{0x8367, 0x1636, 0x199B, 0x88BC, 0x2412, 0x2301, 0x4514},
        new List<ushort>{0x2301, 0x1503, 0x1636, 0x8367, 0x88BC, 0x289A},
        new List<ushort>{0x1636, 0x8367, 0x88BC, 0x199B},
        new List<ushort>{0x8367, 0x4647, 0x4445, 0x4514, 0x1503, 0x199B, 0x88BC},
        new List<ushort>{0x2301, 0x4514, 0x4445, 0x4647, 0x8367, 0x88BC, 0x289A},
        new List<ushort>{0x8367, 0x4647, 0x4445, 0x2412, 0x2301, 0x1503, 0x199B, 0x88BC},
        new List<ushort>{0x8367, 0x4647, 0x4445, 0x2412, 0x289A, 0x88BC},
        new List<ushort>{0x8367, 0x4647, 0x4445, 0x4514, 0x1503, 0x199B, 0x88BC, 0x2412, 0x8525, 0x89AC, 0x289A},
        new List<ushort>{0x8525, 0x2412, 0x2301, 0x4514, 0x4445, 0x4647, 0x8367, 0x88BC, 0x89AC},
        new List<ushort>{0x8525, 0x4445, 0x4647, 0x8367, 0x1503, 0x2301, 0x88BC, 0x199B, 0x289A, 0x89AC},
        new List<ushort>{0x8367, 0x4647, 0x4445, 0x8525, 0x89AC, 0x88BC},
        new List<ushort>{0x8367, 0x4647, 0x8658, 0x8525, 0x4514, 0x1503, 0x199B, 0x88BC},
        new List<ushort>{0x8367, 0x4647, 0x8658, 0x8525, 0x4514, 0x2301, 0x289A, 0x88BC},
        new List<ushort>{0x1503, 0x2301, 0x2412, 0x8525, 0x8658, 0x4647, 0x8367, 0x88BC, 0x199B},
        new List<ushort>{0x8367, 0x4647, 0x8658, 0x8525, 0x2412, 0x289A, 0x88BC},
        new List<ushort>{0x2412, 0x4514, 0x1503, 0x8367, 0x4647, 0x8658, 0x199B, 0x88BC, 0x89AC, 0x289A},
        new List<ushort>{0x8658, 0x4647, 0x8367, 0x88BC, 0x89AC, 0x2412, 0x2301, 0x4514},
        new List<ushort>{0x8367, 0x4647, 0x8658, 0x2301, 0x1503, 0x89AC, 0x289A, 0x199B, 0x88BC},
        new List<ushort>{0x8658, 0x4647, 0x8367, 0x88BC, 0x89AC},
        new List<ushort>{0x1503, 0x4514, 0x4445, 0x4647, 0x8367, 0x8478, 0x8658, 0x89AC, 0x199B},
        new List<ushort>{0x8658, 0x8478, 0x8367, 0x4647, 0x4445, 0x4514, 0x2301, 0x289A, 0x89AC},
        new List<ushort>{0x1503, 0x2301, 0x2412, 0x4445, 0x4647, 0x8367, 0x8478, 0x8658, 0x89AC, 0x199B},
        new List<ushort>{0x8658, 0x8478, 0x8367, 0x4647, 0x4445, 0x2412, 0x289A, 0x89AC},
        new List<ushort>{0x2412, 0x8525, 0x8658, 0x8478, 0x8367, 0x4647, 0x4445, 0x4514, 0x1503, 0x199B, 0x289A},
        new List<ushort>{0x8367, 0x8478, 0x8658, 0x8525, 0x2412, 0x2301, 0x4514, 0x4445, 0x4647},
        new List<ushort>{0x1503, 0x2301, 0x289A, 0x199B, 0x8367, 0x8478, 0x8658, 0x8525, 0x4445, 0x4647},
        new List<ushort>{0x8478, 0x8658, 0x8525, 0x4445, 0x4647, 0x8367},
        new List<ushort>{0x8525, 0x4514, 0x1503, 0x199B, 0x89AC, 0x8478, 0x8367, 0x4647},
        new List<ushort>{0x8525, 0x4514, 0x2301, 0x289A, 0x89AC, 0x8478, 0x8367, 0x4647},
        new List<ushort>{0x8525, 0x2412, 0x2301, 0x1503, 0x199B, 0x89AC, 0x8478, 0x8367, 0x4647},
        new List<ushort>{0x2412, 0x8525, 0x89AC, 0x289A, 0x8367, 0x8478, 0x4647},
        new List<ushort>{0x1503, 0x4514, 0x2412, 0x289A, 0x199B, 0x8367, 0x8478, 0x4647},
        new List<ushort>{0x2301, 0x2412, 0x4514, 0x8478, 0x8367, 0x4647},
        new List<ushort>{0x2301, 0x1503, 0x199B, 0x289A, 0x8478, 0x8367, 0x4647},
        new List<ushort>{0x8478, 0x8367, 0x4647},
        new List<ushort>{0x1503, 0x4514, 0x4445, 0x8478, 0x88BC, 0x199B},
        new List<ushort>{0x2301, 0x4514, 0x4445, 0x8478, 0x88BC, 0x289A},
        new List<ushort>{0x1503, 0x2301, 0x2412, 0x4445, 0x8478, 0x88BC, 0x199B},
        new List<ushort>{0x8478, 0x4445, 0x2412, 0x289A, 0x88BC},
        new List<ushort>{0x1503, 0x4514, 0x4445, 0x8478, 0x88BC, 0x199B, 0x8525, 0x2412, 0x289A, 0x89AC},
        new List<ushort>{0x8525, 0x2412, 0x2301, 0x4514, 0x4445, 0x8478, 0x88BC, 0x89AC},
        new List<ushort>{0x8525, 0x4445, 0x8478, 0x1503, 0x2301, 0x88BC, 0x199B, 0x289A, 0x89AC},
        new List<ushort>{0x8478, 0x4445, 0x8525, 0x89AC, 0x88BC},
        new List<ushort>{0x8478, 0x8658, 0x8525, 0x4514, 0x1503, 0x199B, 0x88BC},
        new List<ushort>{0x2301, 0x4514, 0x8525, 0x8658, 0x8478, 0x88BC, 0x289A},
        new List<ushort>{0x8478, 0x8658, 0x8525, 0x2412, 0x2301, 0x1503, 0x199B, 0x88BC},
        new List<ushort>{0x8478, 0x8658, 0x8525, 0x2412, 0x289A, 0x88BC},
        new List<ushort>{0x2412, 0x4514, 0x1503, 0x8478, 0x8658, 0x199B, 0x88BC, 0x89AC, 0x289A},
        new List<ushort>{0x8478, 0x8658, 0x89AC, 0x88BC, 0x2301, 0x2412, 0x4514},
        new List<ushort>{0x1503, 0x2301, 0x8658, 0x8478, 0x289A, 0x89AC, 0x88BC, 0x199B},
        new List<ushort>{0x8478, 0x8658, 0x89AC, 0x88BC},
        new List<ushort>{0x8658, 0x4445, 0x4514, 0x1503, 0x199B, 0x89AC},
        new List<ushort>{0x8658, 0x4445, 0x4514, 0x2301, 0x289A, 0x89AC},
        new List<ushort>{0x8658, 0x4445, 0x2412, 0x2301, 0x1503, 0x199B, 0x89AC},
        new List<ushort>{0x2412, 0x4445, 0x8658, 0x89AC, 0x289A},
        new List<ushort>{0x2412, 0x8525, 0x8658, 0x4445, 0x4514, 0x1503, 0x199B, 0x289A},
        new List<ushort>{0x8525, 0x2412, 0x2301, 0x4514, 0x4445, 0x8658},
        new List<ushort>{0x1503, 0x2301, 0x289A, 0x199B, 0x8658, 0x8525, 0x4445},
        new List<ushort>{0x8525, 0x8658, 0x4445},
        new List<ushort>{0x8525, 0x4514, 0x1503, 0x199B, 0x89AC},
        new List<ushort>{0x8525, 0x4514, 0x2301, 0x289A, 0x89AC},
        new List<ushort>{0x8525, 0x2412, 0x2301, 0x1503, 0x199B, 0x89AC},
        new List<ushort>{0x8525, 0x2412, 0x289A, 0x89AC},
        new List<ushort>{0x1503, 0x4514, 0x2412, 0x289A, 0x199B},
        new List<ushort>{0x2301, 0x2412, 0x4514},
        new List<ushort>{0x2301, 0x1503, 0x199B, 0x289A},
        new List<ushort>{}
    };

    // Update is called once per frame
    //void Update()
    //{
    //    // streaming chunks in and out
    //}
}